
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.38 (git sha1 543faed9c8c, clang++ 17.0.6 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Liberty frontend: /root/.volare/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.

2. Executing Verilog-2005 frontend: /openlane/designs/semi_cpu/src/Control_Unit.v
Parsing SystemVerilog input from `/openlane/designs/semi_cpu/src/Control_Unit.v' to AST representation.
Storing AST representation for module `$abstract\Control_Unit'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /openlane/designs/semi_cpu/src/Seven_Segment_Converter.v
Parsing SystemVerilog input from `/openlane/designs/semi_cpu/src/Seven_Segment_Converter.v' to AST representation.
Storing AST representation for module `$abstract\Seven_Segment_Converter'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: /openlane/designs/semi_cpu/src/Instruction_Decoder.v
Parsing SystemVerilog input from `/openlane/designs/semi_cpu/src/Instruction_Decoder.v' to AST representation.
Storing AST representation for module `$abstract\Instruction_Decoder'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: /openlane/designs/semi_cpu/src/Register_File.v
Parsing SystemVerilog input from `/openlane/designs/semi_cpu/src/Register_File.v' to AST representation.
Storing AST representation for module `$abstract\Register_File'.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: /openlane/designs/semi_cpu/src/Instruction_Memory.v
Parsing SystemVerilog input from `/openlane/designs/semi_cpu/src/Instruction_Memory.v' to AST representation.
Storing AST representation for module `$abstract\Instruction_Memory'.
Successfully finished Verilog frontend.

7. Executing Verilog-2005 frontend: /openlane/designs/semi_cpu/src/semi_cpu.v
Parsing SystemVerilog input from `/openlane/designs/semi_cpu/src/semi_cpu.v' to AST representation.
Storing AST representation for module `$abstract\Main'.
Successfully finished Verilog frontend.

8. Executing Verilog-2005 frontend: /openlane/designs/semi_cpu/src/Clock_Divider.v
Parsing SystemVerilog input from `/openlane/designs/semi_cpu/src/Clock_Divider.v' to AST representation.
Storing AST representation for module `$abstract\Clock_Divider'.
Successfully finished Verilog frontend.

9. Executing Verilog-2005 frontend: /openlane/designs/semi_cpu/src/ALU.v
Parsing SystemVerilog input from `/openlane/designs/semi_cpu/src/ALU.v' to AST representation.
Storing AST representation for module `$abstract\ALU'.
Successfully finished Verilog frontend.

10. Executing HIERARCHY pass (managing design hierarchy).

11. Executing AST frontend in derive mode using pre-parsed AST for module `\Main'.
Generating RTLIL representation for module `\Main'.

11.1. Analyzing design hierarchy..
Top module:  \Main

11.2. Executing AST frontend in derive mode using pre-parsed AST for module `\Seven_Segment_Converter'.
Generating RTLIL representation for module `\Seven_Segment_Converter'.

11.3. Executing AST frontend in derive mode using pre-parsed AST for module `\Clock_Divider'.
Generating RTLIL representation for module `\Clock_Divider'.

11.4. Executing AST frontend in derive mode using pre-parsed AST for module `\Register_File'.
Generating RTLIL representation for module `\Register_File'.

11.5. Executing AST frontend in derive mode using pre-parsed AST for module `\ALU'.
Generating RTLIL representation for module `\ALU'.

11.6. Executing AST frontend in derive mode using pre-parsed AST for module `\Control_Unit'.
Generating RTLIL representation for module `\Control_Unit'.

11.7. Executing AST frontend in derive mode using pre-parsed AST for module `\Instruction_Decoder'.
Generating RTLIL representation for module `\Instruction_Decoder'.

11.8. Executing AST frontend in derive mode using pre-parsed AST for module `\Instruction_Memory'.
Generating RTLIL representation for module `\Instruction_Memory'.

11.9. Analyzing design hierarchy..
Top module:  \Main
Used module:     \Seven_Segment_Converter
Used module:     \Clock_Divider
Used module:     \Register_File
Used module:     \ALU
Used module:     \Control_Unit
Used module:     \Instruction_Decoder
Used module:     \Instruction_Memory

11.10. Analyzing design hierarchy..
Top module:  \Main
Used module:     \Seven_Segment_Converter
Used module:     \Clock_Divider
Used module:     \Register_File
Used module:     \ALU
Used module:     \Control_Unit
Used module:     \Instruction_Decoder
Used module:     \Instruction_Memory
Removing unused module `$abstract\ALU'.
Removing unused module `$abstract\Clock_Divider'.
Removing unused module `$abstract\Main'.
Removing unused module `$abstract\Instruction_Memory'.
Removing unused module `$abstract\Register_File'.
Removing unused module `$abstract\Instruction_Decoder'.
Removing unused module `$abstract\Seven_Segment_Converter'.
Removing unused module `$abstract\Control_Unit'.
Removed 8 unused modules.
Mapping positional arguments of cell Main.seven_seg_conv (Seven_Segment_Converter).
Mapping positional arguments of cell Main.clk_div (Clock_Divider).
Mapping positional arguments of cell Main.reg_file (Register_File).
Mapping positional arguments of cell Main.alu (ALU).
Mapping positional arguments of cell Main.ctrl_unit (Control_Unit).
Mapping positional arguments of cell Main.inst_dec (Instruction_Decoder).
Mapping positional arguments of cell Main.inst_mem (Instruction_Memory).

12. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/semi_cpu/runs/RUN_2025.06.07_09.36.33/tmp/synthesis/hierarchy.dot'.
Dumping module Main to page 1.
Renaming module Main to Main.

13. Executing TRIBUF pass.

14. Executing HIERARCHY pass (managing design hierarchy).

14.1. Analyzing design hierarchy..
Top module:  \Main
Used module:     \Seven_Segment_Converter
Used module:     \Clock_Divider
Used module:     \Register_File
Used module:     \ALU
Used module:     \Control_Unit
Used module:     \Instruction_Decoder
Used module:     \Instruction_Memory

14.2. Analyzing design hierarchy..
Top module:  \Main
Used module:     \Seven_Segment_Converter
Used module:     \Clock_Divider
Used module:     \Register_File
Used module:     \ALU
Used module:     \Control_Unit
Used module:     \Instruction_Decoder
Used module:     \Instruction_Memory
Removed 0 unused modules.

15. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `Instruction_Memory.$proc$/openlane/designs/semi_cpu/src/Instruction_Memory.v:0$65'.
Cleaned up 0 empty switches.

16. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/openlane/designs/semi_cpu/src/semi_cpu.v:31$1 in module Main.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/semi_cpu/src/Control_Unit.v:14$58 in module Control_Unit.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/semi_cpu/src/ALU.v:7$52 in module ALU.
Marked 2 switch rules as full_case in process $proc$/openlane/designs/semi_cpu/src/Register_File.v:13$38 in module Register_File.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/semi_cpu/src/Clock_Divider.v:11$29 in module Clock_Divider.
Removed 1 dead cases from process $proc$/openlane/designs/semi_cpu/src/Seven_Segment_Converter.v:31$10 in module Seven_Segment_Converter.
Marked 2 switch rules as full_case in process $proc$/openlane/designs/semi_cpu/src/Seven_Segment_Converter.v:31$10 in module Seven_Segment_Converter.
Removed a total of 1 dead cases.

17. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 19 assignments to connections.

18. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\Main.$proc$/openlane/designs/semi_cpu/src/semi_cpu.v:0$9'.
  Set init value: \PC = 8'00000000
Found init rule in `\Control_Unit.$proc$/openlane/designs/semi_cpu/src/Control_Unit.v:0$62'.
  Set init value: \RegWrite = 1'0
Found init rule in `\Clock_Divider.$proc$/openlane/designs/semi_cpu/src/Clock_Divider.v:0$33'.
  Set init value: \slow_clk = 1'0
  Set init value: \counter = 20'00000000000000000000
Found init rule in `\Seven_Segment_Converter.$proc$/openlane/designs/semi_cpu/src/Seven_Segment_Converter.v:0$28'.
  Set init value: \digit_counter = 4'0000

19. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst in `\Main.$proc$/openlane/designs/semi_cpu/src/semi_cpu.v:31$1'.
Found VHDL-style edge-trigger \next in `\Main.$proc$/openlane/designs/semi_cpu/src/semi_cpu.v:31$1'.

20. Executing PROC_ROM pass (convert switches to ROMs).
Converted 1 switch.
<suppressed ~6 debug messages>

21. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\Main.$proc$/openlane/designs/semi_cpu/src/semi_cpu.v:0$9'.
Creating decoders for process `\Main.$proc$/openlane/designs/semi_cpu/src/semi_cpu.v:31$1'.
     1/1: $0\PC[7:0]
Creating decoders for process `\Control_Unit.$proc$/openlane/designs/semi_cpu/src/Control_Unit.v:0$62'.
Creating decoders for process `\Control_Unit.$proc$/openlane/designs/semi_cpu/src/Control_Unit.v:14$58'.
     1/1: $1\ALUControl[2:0]
Creating decoders for process `\ALU.$proc$/openlane/designs/semi_cpu/src/ALU.v:7$52'.
     1/1: $1\ALUResult[31:0]
Creating decoders for process `\Register_File.$proc$/openlane/designs/semi_cpu/src/Register_File.v:0$50'.
Creating decoders for process `\Register_File.$proc$/openlane/designs/semi_cpu/src/Register_File.v:13$38'.
     1/6: $2$memwr$\memory$/openlane/designs/semi_cpu/src/Register_File.v:15$35_EN[31:0]$48
     2/6: $2$memwr$\memory$/openlane/designs/semi_cpu/src/Register_File.v:15$35_DATA[31:0]$47
     3/6: $2$memwr$\memory$/openlane/designs/semi_cpu/src/Register_File.v:15$35_ADDR[4:0]$46
     4/6: $1$memwr$\memory$/openlane/designs/semi_cpu/src/Register_File.v:15$35_EN[31:0]$44
     5/6: $1$memwr$\memory$/openlane/designs/semi_cpu/src/Register_File.v:15$35_DATA[31:0]$43
     6/6: $1$memwr$\memory$/openlane/designs/semi_cpu/src/Register_File.v:15$35_ADDR[4:0]$42
Creating decoders for process `\Clock_Divider.$proc$/openlane/designs/semi_cpu/src/Clock_Divider.v:0$33'.
Creating decoders for process `\Clock_Divider.$proc$/openlane/designs/semi_cpu/src/Clock_Divider.v:11$29'.
     1/2: $1\counter[19:0]
     2/2: $1\slow_clk[0:0]
Creating decoders for process `\Seven_Segment_Converter.$proc$/openlane/designs/semi_cpu/src/Seven_Segment_Converter.v:0$28'.
Creating decoders for process `\Seven_Segment_Converter.$proc$/openlane/designs/semi_cpu/src/Seven_Segment_Converter.v:31$10'.
     1/4: $1\cx[7:0]
     2/4: $1\temp[31:0]
     3/4: $1\current_digit[3:0]
     4/4: $1\an[7:0]

22. Executing PROC_DLATCH pass (convert process syncs to latches).
Latch inferred for signal `\ALU.\ALUResult' from process `\ALU.$proc$/openlane/designs/semi_cpu/src/ALU.v:7$52': $auto$proc_dlatch.cc:427:proc_dlatch$146
No latch inferred for signal `\Register_File.$memwr$\memory$/openlane/designs/semi_cpu/src/Register_File.v:12$34_EN' from process `\Register_File.$proc$/openlane/designs/semi_cpu/src/Register_File.v:0$50'.

23. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\Main.\PC' using process `\Main.$proc$/openlane/designs/semi_cpu/src/semi_cpu.v:31$1'.
  created $adff cell `$procdff$175' with positive edge clock and negative level reset.
Creating register for signal `\Control_Unit.\ALUControl' using process `\Control_Unit.$proc$/openlane/designs/semi_cpu/src/Control_Unit.v:14$58'.
  created $dff cell `$procdff$176' with positive edge clock.
Creating register for signal `\Control_Unit.\RegWrite' using process `\Control_Unit.$proc$/openlane/designs/semi_cpu/src/Control_Unit.v:14$58'.
  created $dff cell `$procdff$177' with positive edge clock.
Creating register for signal `\Register_File.$memwr$\memory$/openlane/designs/semi_cpu/src/Register_File.v:15$35_ADDR' using process `\Register_File.$proc$/openlane/designs/semi_cpu/src/Register_File.v:13$38'.
  created $dff cell `$procdff$178' with positive edge clock.
Creating register for signal `\Register_File.$memwr$\memory$/openlane/designs/semi_cpu/src/Register_File.v:15$35_DATA' using process `\Register_File.$proc$/openlane/designs/semi_cpu/src/Register_File.v:13$38'.
  created $dff cell `$procdff$179' with positive edge clock.
Creating register for signal `\Register_File.$memwr$\memory$/openlane/designs/semi_cpu/src/Register_File.v:15$35_EN' using process `\Register_File.$proc$/openlane/designs/semi_cpu/src/Register_File.v:13$38'.
  created $dff cell `$procdff$180' with positive edge clock.
Creating register for signal `\Clock_Divider.\slow_clk' using process `\Clock_Divider.$proc$/openlane/designs/semi_cpu/src/Clock_Divider.v:11$29'.
  created $dff cell `$procdff$181' with positive edge clock.
Creating register for signal `\Clock_Divider.\counter' using process `\Clock_Divider.$proc$/openlane/designs/semi_cpu/src/Clock_Divider.v:11$29'.
  created $dff cell `$procdff$182' with positive edge clock.
Creating register for signal `\Seven_Segment_Converter.\an' using process `\Seven_Segment_Converter.$proc$/openlane/designs/semi_cpu/src/Seven_Segment_Converter.v:31$10'.
  created $dff cell `$procdff$183' with positive edge clock.
Creating register for signal `\Seven_Segment_Converter.\cx' using process `\Seven_Segment_Converter.$proc$/openlane/designs/semi_cpu/src/Seven_Segment_Converter.v:31$10'.
  created $dff cell `$procdff$184' with positive edge clock.
Creating register for signal `\Seven_Segment_Converter.\temp' using process `\Seven_Segment_Converter.$proc$/openlane/designs/semi_cpu/src/Seven_Segment_Converter.v:31$10'.
  created $dff cell `$procdff$185' with positive edge clock.
Creating register for signal `\Seven_Segment_Converter.\digit_counter' using process `\Seven_Segment_Converter.$proc$/openlane/designs/semi_cpu/src/Seven_Segment_Converter.v:31$10'.
  created $dff cell `$procdff$186' with positive edge clock.
Creating register for signal `\Seven_Segment_Converter.\current_digit' using process `\Seven_Segment_Converter.$proc$/openlane/designs/semi_cpu/src/Seven_Segment_Converter.v:31$10'.
  created $dff cell `$procdff$187' with positive edge clock.

24. Executing PROC_MEMWR pass (convert process memory writes to cells).

25. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `Main.$proc$/openlane/designs/semi_cpu/src/semi_cpu.v:0$9'.
Removing empty process `Main.$proc$/openlane/designs/semi_cpu/src/semi_cpu.v:31$1'.
Removing empty process `Control_Unit.$proc$/openlane/designs/semi_cpu/src/Control_Unit.v:0$62'.
Found and cleaned up 1 empty switch in `\Control_Unit.$proc$/openlane/designs/semi_cpu/src/Control_Unit.v:14$58'.
Removing empty process `Control_Unit.$proc$/openlane/designs/semi_cpu/src/Control_Unit.v:14$58'.
Found and cleaned up 1 empty switch in `\ALU.$proc$/openlane/designs/semi_cpu/src/ALU.v:7$52'.
Removing empty process `ALU.$proc$/openlane/designs/semi_cpu/src/ALU.v:7$52'.
Removing empty process `Register_File.$proc$/openlane/designs/semi_cpu/src/Register_File.v:0$50'.
Found and cleaned up 2 empty switches in `\Register_File.$proc$/openlane/designs/semi_cpu/src/Register_File.v:13$38'.
Removing empty process `Register_File.$proc$/openlane/designs/semi_cpu/src/Register_File.v:13$38'.
Removing empty process `Clock_Divider.$proc$/openlane/designs/semi_cpu/src/Clock_Divider.v:0$33'.
Found and cleaned up 1 empty switch in `\Clock_Divider.$proc$/openlane/designs/semi_cpu/src/Clock_Divider.v:11$29'.
Removing empty process `Clock_Divider.$proc$/openlane/designs/semi_cpu/src/Clock_Divider.v:11$29'.
Removing empty process `Seven_Segment_Converter.$proc$/openlane/designs/semi_cpu/src/Seven_Segment_Converter.v:0$28'.
Found and cleaned up 2 empty switches in `\Seven_Segment_Converter.$proc$/openlane/designs/semi_cpu/src/Seven_Segment_Converter.v:31$10'.
Removing empty process `Seven_Segment_Converter.$proc$/openlane/designs/semi_cpu/src/Seven_Segment_Converter.v:31$10'.
Cleaned up 7 empty switches.

26. Executing CHECK pass (checking for obvious problems).
Checking module Main...
Checking module Instruction_Decoder...
Checking module Control_Unit...
Checking module ALU...
Checking module Register_File...
Checking module Clock_Divider...
Checking module Seven_Segment_Converter...
Checking module Instruction_Memory...
Found and reported 0 problems.

27. Executing OPT_EXPR pass (perform const folding).
Optimizing module Main.
Optimizing module Instruction_Decoder.
Optimizing module Control_Unit.
<suppressed ~1 debug messages>
Optimizing module ALU.
<suppressed ~7 debug messages>
Optimizing module Register_File.
<suppressed ~1 debug messages>
Optimizing module Clock_Divider.
Optimizing module Seven_Segment_Converter.
<suppressed ~3 debug messages>
Optimizing module Instruction_Memory.

28. Executing FLATTEN pass (flatten design).
Deleting now unused module Instruction_Decoder.
Deleting now unused module Control_Unit.
Deleting now unused module ALU.
Deleting now unused module Register_File.
Deleting now unused module Clock_Divider.
Deleting now unused module Seven_Segment_Converter.
Deleting now unused module Instruction_Memory.
<suppressed ~7 debug messages>

29. Executing OPT_EXPR pass (perform const folding).
Optimizing module Main.
<suppressed ~1 debug messages>

30. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Main..
Removed 8 unused cells and 65 unused wires.
<suppressed ~10 debug messages>

31. Executing OPT pass (performing simple optimizations).

31.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Main.

31.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Main'.
<suppressed ~84 debug messages>
Removed a total of 28 cells.

31.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Main..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $flatten\reg_file.$procmux$86.
    dead port 2/2 on $mux $flatten\reg_file.$procmux$92.
    dead port 2/2 on $mux $flatten\reg_file.$procmux$98.
Removed 3 multiplexer ports.
<suppressed ~10 debug messages>

31.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Main.
    Consolidated identical input bits for $mux cell $flatten\reg_file.$procmux$84:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$flatten\reg_file.$procmux$84_Y
      New ports: A=1'0, B=1'1, Y=$flatten\reg_file.$procmux$84_Y [0]
      New connections: $flatten\reg_file.$procmux$84_Y [31:1] = { $flatten\reg_file.$procmux$84_Y [0] $flatten\reg_file.$procmux$84_Y [0] $flatten\reg_file.$procmux$84_Y [0] $flatten\reg_file.$procmux$84_Y [0] $flatten\reg_file.$procmux$84_Y [0] $flatten\reg_file.$procmux$84_Y [0] $flatten\reg_file.$procmux$84_Y [0] $flatten\reg_file.$procmux$84_Y [0] $flatten\reg_file.$procmux$84_Y [0] $flatten\reg_file.$procmux$84_Y [0] $flatten\reg_file.$procmux$84_Y [0] $flatten\reg_file.$procmux$84_Y [0] $flatten\reg_file.$procmux$84_Y [0] $flatten\reg_file.$procmux$84_Y [0] $flatten\reg_file.$procmux$84_Y [0] $flatten\reg_file.$procmux$84_Y [0] $flatten\reg_file.$procmux$84_Y [0] $flatten\reg_file.$procmux$84_Y [0] $flatten\reg_file.$procmux$84_Y [0] $flatten\reg_file.$procmux$84_Y [0] $flatten\reg_file.$procmux$84_Y [0] $flatten\reg_file.$procmux$84_Y [0] $flatten\reg_file.$procmux$84_Y [0] $flatten\reg_file.$procmux$84_Y [0] $flatten\reg_file.$procmux$84_Y [0] $flatten\reg_file.$procmux$84_Y [0] $flatten\reg_file.$procmux$84_Y [0] $flatten\reg_file.$procmux$84_Y [0] $flatten\reg_file.$procmux$84_Y [0] $flatten\reg_file.$procmux$84_Y [0] $flatten\reg_file.$procmux$84_Y [0] }
    New ctrl vector for $pmux cell $flatten\seven_seg_conv.$procmux$117: { $flatten\seven_seg_conv.$procmux$125_CMP $auto$opt_reduce.cc:134:opt_pmux$190 }
    New ctrl vector for $pmux cell $flatten\seven_seg_conv.$procmux$127: { $flatten\seven_seg_conv.$procmux$125_CMP $auto$opt_reduce.cc:134:opt_pmux$192 }
    New ctrl vector for $pmux cell $flatten\alu.$procmux$77: { $flatten\alu.$procmux$80_CMP $flatten\alu.$procmux$79_CMP $flatten\alu.$procmux$78_CMP }
  Optimizing cells in module \Main.
    Consolidated identical input bits for $mux cell $flatten\reg_file.$procmux$101:
      Old ports: A=0, B=$flatten\reg_file.$2$memwr$\memory$/openlane/designs/semi_cpu/src/Register_File.v:15$35_EN[31:0]$48, Y=$flatten\reg_file.$0$memwr$\memory$/openlane/designs/semi_cpu/src/Register_File.v:15$35_EN[31:0]$41
      New ports: A=1'0, B=$flatten\reg_file.$procmux$84_Y [0], Y=$flatten\reg_file.$0$memwr$\memory$/openlane/designs/semi_cpu/src/Register_File.v:15$35_EN[31:0]$41 [0]
      New connections: $flatten\reg_file.$0$memwr$\memory$/openlane/designs/semi_cpu/src/Register_File.v:15$35_EN[31:0]$41 [31:1] = { $flatten\reg_file.$0$memwr$\memory$/openlane/designs/semi_cpu/src/Register_File.v:15$35_EN[31:0]$41 [0] $flatten\reg_file.$0$memwr$\memory$/openlane/designs/semi_cpu/src/Register_File.v:15$35_EN[31:0]$41 [0] $flatten\reg_file.$0$memwr$\memory$/openlane/designs/semi_cpu/src/Register_File.v:15$35_EN[31:0]$41 [0] $flatten\reg_file.$0$memwr$\memory$/openlane/designs/semi_cpu/src/Register_File.v:15$35_EN[31:0]$41 [0] $flatten\reg_file.$0$memwr$\memory$/openlane/designs/semi_cpu/src/Register_File.v:15$35_EN[31:0]$41 [0] $flatten\reg_file.$0$memwr$\memory$/openlane/designs/semi_cpu/src/Register_File.v:15$35_EN[31:0]$41 [0] $flatten\reg_file.$0$memwr$\memory$/openlane/designs/semi_cpu/src/Register_File.v:15$35_EN[31:0]$41 [0] $flatten\reg_file.$0$memwr$\memory$/openlane/designs/semi_cpu/src/Register_File.v:15$35_EN[31:0]$41 [0] $flatten\reg_file.$0$memwr$\memory$/openlane/designs/semi_cpu/src/Register_File.v:15$35_EN[31:0]$41 [0] $flatten\reg_file.$0$memwr$\memory$/openlane/designs/semi_cpu/src/Register_File.v:15$35_EN[31:0]$41 [0] $flatten\reg_file.$0$memwr$\memory$/openlane/designs/semi_cpu/src/Register_File.v:15$35_EN[31:0]$41 [0] $flatten\reg_file.$0$memwr$\memory$/openlane/designs/semi_cpu/src/Register_File.v:15$35_EN[31:0]$41 [0] $flatten\reg_file.$0$memwr$\memory$/openlane/designs/semi_cpu/src/Register_File.v:15$35_EN[31:0]$41 [0] $flatten\reg_file.$0$memwr$\memory$/openlane/designs/semi_cpu/src/Register_File.v:15$35_EN[31:0]$41 [0] $flatten\reg_file.$0$memwr$\memory$/openlane/designs/semi_cpu/src/Register_File.v:15$35_EN[31:0]$41 [0] $flatten\reg_file.$0$memwr$\memory$/openlane/designs/semi_cpu/src/Register_File.v:15$35_EN[31:0]$41 [0] $flatten\reg_file.$0$memwr$\memory$/openlane/designs/semi_cpu/src/Register_File.v:15$35_EN[31:0]$41 [0] $flatten\reg_file.$0$memwr$\memory$/openlane/designs/semi_cpu/src/Register_File.v:15$35_EN[31:0]$41 [0] $flatten\reg_file.$0$memwr$\memory$/openlane/designs/semi_cpu/src/Register_File.v:15$35_EN[31:0]$41 [0] $flatten\reg_file.$0$memwr$\memory$/openlane/designs/semi_cpu/src/Register_File.v:15$35_EN[31:0]$41 [0] $flatten\reg_file.$0$memwr$\memory$/openlane/designs/semi_cpu/src/Register_File.v:15$35_EN[31:0]$41 [0] $flatten\reg_file.$0$memwr$\memory$/openlane/designs/semi_cpu/src/Register_File.v:15$35_EN[31:0]$41 [0] $flatten\reg_file.$0$memwr$\memory$/openlane/designs/semi_cpu/src/Register_File.v:15$35_EN[31:0]$41 [0] $flatten\reg_file.$0$memwr$\memory$/openlane/designs/semi_cpu/src/Register_File.v:15$35_EN[31:0]$41 [0] $flatten\reg_file.$0$memwr$\memory$/openlane/designs/semi_cpu/src/Register_File.v:15$35_EN[31:0]$41 [0] $flatten\reg_file.$0$memwr$\memory$/openlane/designs/semi_cpu/src/Register_File.v:15$35_EN[31:0]$41 [0] $flatten\reg_file.$0$memwr$\memory$/openlane/designs/semi_cpu/src/Register_File.v:15$35_EN[31:0]$41 [0] $flatten\reg_file.$0$memwr$\memory$/openlane/designs/semi_cpu/src/Register_File.v:15$35_EN[31:0]$41 [0] $flatten\reg_file.$0$memwr$\memory$/openlane/designs/semi_cpu/src/Register_File.v:15$35_EN[31:0]$41 [0] $flatten\reg_file.$0$memwr$\memory$/openlane/designs/semi_cpu/src/Register_File.v:15$35_EN[31:0]$41 [0] $flatten\reg_file.$0$memwr$\memory$/openlane/designs/semi_cpu/src/Register_File.v:15$35_EN[31:0]$41 [0] }
  Optimizing cells in module \Main.
Performed a total of 5 changes.

31.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Main'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

31.6. Executing OPT_DFF pass (perform DFF optimizations).

31.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Main..
Removed 0 unused cells and 32 unused wires.
<suppressed ~1 debug messages>

31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Main.

31.9. Rerunning OPT passes. (Maybe there is more to do..)

31.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Main..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

31.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Main.
Performed a total of 0 changes.

31.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Main'.
Removed a total of 0 cells.

31.13. Executing OPT_DFF pass (perform DFF optimizations).

31.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Main..

31.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module Main.

31.16. Finished OPT passes. (There is nothing left to do.)

32. Executing FSM pass (extract and optimize FSM).

32.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking Main.ctrl_unit.ALUControl as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking Main.seven_seg_conv.an as FSM state register:
    Register is connected to module port.
    Users of register don't seem to benefit from recoding.

32.2. Executing FSM_EXTRACT pass (extracting FSM from design).

32.3. Executing FSM_OPT pass (simple optimizations of FSMs).

32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Main..

32.5. Executing FSM_OPT pass (simple optimizations of FSMs).

32.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

32.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

32.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Main.

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Main'.
Removed a total of 0 cells.

33.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Main..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

33.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Main.
Performed a total of 0 changes.

33.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Main'.
Removed a total of 0 cells.

33.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\seven_seg_conv.$procdff$185 ($dff) from module Main (D = $flatten\seven_seg_conv.$0\temp[31:0], Q = \seven_seg_conv.temp).
Adding EN signal on $flatten\seven_seg_conv.$procdff$183 ($dff) from module Main (D = $flatten\seven_seg_conv.$0\an[7:0], Q = \seven_seg_conv.an).
Adding SRST signal on $flatten\clk_div.$procdff$182 ($dff) from module Main (D = $flatten\clk_div.$add$/openlane/designs/semi_cpu/src/Clock_Divider.v:18$32_Y [19:0], Q = \clk_div.counter, rval = 20'00000000000000000000).
Adding EN signal on $flatten\clk_div.$procdff$181 ($dff) from module Main (D = $flatten\clk_div.$not$/openlane/designs/semi_cpu/src/Clock_Divider.v:14$31_Y, Q = \clk_div.slow_clk).

33.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Main..
Removed 2 unused cells and 2 unused wires.
<suppressed ~3 debug messages>

33.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Main.
<suppressed ~2 debug messages>

33.9. Rerunning OPT passes. (Maybe there is more to do..)

33.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Main..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

33.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Main.
Performed a total of 0 changes.

33.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Main'.
Removed a total of 0 cells.

33.13. Executing OPT_DFF pass (perform DFF optimizations).

33.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Main..

33.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module Main.

33.16. Finished OPT passes. (There is nothing left to do.)

34. Executing WREDUCE pass (reducing word size of cells).
Removed top 24 address bits (of 32) from memory init port Main.$flatten\inst_mem.$meminit$\instructions$/openlane/designs/semi_cpu/src/Instruction_Memory.v:0$64 (inst_mem.instructions).
Removed top 27 address bits (of 32) from memory init port Main.$flatten\reg_file.$meminit$\memory$/openlane/designs/semi_cpu/src/Register_File.v:12$49 (reg_file.memory).
Removed top 28 address bits (of 32) from memory init port Main.$flatten\seven_seg_conv.$auto$mem.cc:328:emit$69 ($flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67).
Removed top 28 bits (of 32) from port B of cell Main.$flatten\seven_seg_conv.$div$/openlane/designs/semi_cpu/src/Seven_Segment_Converter.v:100$18 ($div).
Removed top 28 bits (of 32) from port B of cell Main.$flatten\seven_seg_conv.$div$/openlane/designs/semi_cpu/src/Seven_Segment_Converter.v:82$12 ($div).
Removed top 28 bits (of 32) from port B of cell Main.$flatten\seven_seg_conv.$mod$/openlane/designs/semi_cpu/src/Seven_Segment_Converter.v:105$19 ($mod).
Removed top 28 bits (of 32) from port B of cell Main.$flatten\seven_seg_conv.$mod$/openlane/designs/semi_cpu/src/Seven_Segment_Converter.v:81$11 ($mod).
Removed top 31 bits (of 32) from port B of cell Main.$add$/openlane/designs/semi_cpu/src/semi_cpu.v:35$3 ($add).
Removed top 24 bits (of 32) from port Y of cell Main.$add$/openlane/designs/semi_cpu/src/semi_cpu.v:35$3 ($add).
Removed top 1 bits (of 3) from port B of cell Main.$flatten\ctrl_unit.$procmux$74_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell Main.$flatten\ctrl_unit.$procmux$73_CMP0 ($eq).
Removed top 31 bits (of 32) from port B of cell Main.$flatten\clk_div.$add$/openlane/designs/semi_cpu/src/Clock_Divider.v:18$32 ($add).
Removed top 12 bits (of 32) from port Y of cell Main.$flatten\clk_div.$add$/openlane/designs/semi_cpu/src/Clock_Divider.v:18$32 ($add).
Removed top 6 bits (of 20) from port B of cell Main.$flatten\clk_div.$eq$/openlane/designs/semi_cpu/src/Clock_Divider.v:12$30 ($eq).
Removed top 3 bits (of 4) from port B of cell Main.$flatten\seven_seg_conv.$procmux$124_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell Main.$flatten\seven_seg_conv.$procmux$123_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell Main.$flatten\seven_seg_conv.$procmux$122_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell Main.$flatten\seven_seg_conv.$procmux$121_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell Main.$flatten\seven_seg_conv.$procmux$120_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell Main.$flatten\seven_seg_conv.$procmux$119_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell Main.$flatten\seven_seg_conv.$procmux$118_CMP0 ($eq).
Removed top 31 bits (of 32) from port B of cell Main.$flatten\seven_seg_conv.$add$/openlane/designs/semi_cpu/src/Seven_Segment_Converter.v:146$27 ($add).
Removed top 28 bits (of 32) from port Y of cell Main.$flatten\seven_seg_conv.$add$/openlane/designs/semi_cpu/src/Seven_Segment_Converter.v:146$27 ($add).
Removed top 12 bits (of 32) from wire Main.$flatten\clk_div.$add$/openlane/designs/semi_cpu/src/Clock_Divider.v:18$32_Y.

35. Executing PEEPOPT pass (run peephole optimizers).

36. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Main..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

37. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module Main:
  creating $macc model for $add$/openlane/designs/semi_cpu/src/semi_cpu.v:35$3 ($add).
  creating $macc model for $flatten\alu.$add$/openlane/designs/semi_cpu/src/ALU.v:9$53 ($add).
  creating $macc model for $flatten\alu.$sub$/openlane/designs/semi_cpu/src/ALU.v:10$54 ($sub).
  creating $macc model for $flatten\clk_div.$add$/openlane/designs/semi_cpu/src/Clock_Divider.v:18$32 ($add).
  creating $macc model for $flatten\seven_seg_conv.$add$/openlane/designs/semi_cpu/src/Seven_Segment_Converter.v:146$27 ($add).
  creating $alu model for $macc $flatten\seven_seg_conv.$add$/openlane/designs/semi_cpu/src/Seven_Segment_Converter.v:146$27.
  creating $alu model for $macc $flatten\clk_div.$add$/openlane/designs/semi_cpu/src/Clock_Divider.v:18$32.
  creating $alu model for $macc $flatten\alu.$sub$/openlane/designs/semi_cpu/src/ALU.v:10$54.
  creating $alu model for $macc $flatten\alu.$add$/openlane/designs/semi_cpu/src/ALU.v:9$53.
  creating $alu model for $macc $add$/openlane/designs/semi_cpu/src/semi_cpu.v:35$3.
  creating $alu cell for $add$/openlane/designs/semi_cpu/src/semi_cpu.v:35$3: $auto$alumacc.cc:485:replace_alu$202
  creating $alu cell for $flatten\alu.$add$/openlane/designs/semi_cpu/src/ALU.v:9$53: $auto$alumacc.cc:485:replace_alu$205
  creating $alu cell for $flatten\alu.$sub$/openlane/designs/semi_cpu/src/ALU.v:10$54: $auto$alumacc.cc:485:replace_alu$208
  creating $alu cell for $flatten\clk_div.$add$/openlane/designs/semi_cpu/src/Clock_Divider.v:18$32: $auto$alumacc.cc:485:replace_alu$211
  creating $alu cell for $flatten\seven_seg_conv.$add$/openlane/designs/semi_cpu/src/Seven_Segment_Converter.v:146$27: $auto$alumacc.cc:485:replace_alu$214
  created 5 $alu and 0 $macc cells.

38. Executing SHARE pass (SAT-based resource sharing).
Found 8 cells in module Main that may be considered for resource sharing.
  Analyzing resource sharing options for $flatten\seven_seg_conv.$mod$/openlane/designs/semi_cpu/src/Seven_Segment_Converter.v:81$11 ($mod):
    Found 1 activation_patterns using ctrl signal $flatten\seven_seg_conv.$procmux$125_CMP.
    Found 1 candidates: $flatten\seven_seg_conv.$mod$/openlane/designs/semi_cpu/src/Seven_Segment_Converter.v:105$19
    Analyzing resource sharing with $flatten\seven_seg_conv.$mod$/openlane/designs/semi_cpu/src/Seven_Segment_Converter.v:105$19 ($mod):
      Found 1 activation_patterns using ctrl signal $auto$opt_reduce.cc:134:opt_pmux$190.
      Activation pattern for cell $flatten\seven_seg_conv.$mod$/openlane/designs/semi_cpu/src/Seven_Segment_Converter.v:81$11: $flatten\seven_seg_conv.$procmux$125_CMP = 1'1
      Activation pattern for cell $flatten\seven_seg_conv.$mod$/openlane/designs/semi_cpu/src/Seven_Segment_Converter.v:105$19: $auto$opt_reduce.cc:134:opt_pmux$190 = 1'1
      Size of SAT problem: 0 cells, 70 variables, 199 clauses
      According to the SAT solver this pair of cells can be shared.
      Activation signal for $flatten\seven_seg_conv.$mod$/openlane/designs/semi_cpu/src/Seven_Segment_Converter.v:81$11: $auto$share.cc:977:make_cell_activation_logic$217
      New cell: $auto$share.cc:667:make_supercell$224 ($mod)
  Analyzing resource sharing options for $auto$share.cc:667:make_supercell$224 ($mod):
    Found 2 activation_patterns using ctrl signal { $flatten\seven_seg_conv.$procmux$125_CMP $auto$opt_reduce.cc:134:opt_pmux$190 }.
    No candidates found.
  Analyzing resource sharing options for $flatten\seven_seg_conv.$div$/openlane/designs/semi_cpu/src/Seven_Segment_Converter.v:82$12 ($div):
    Found 1 activation_patterns using ctrl signal $flatten\seven_seg_conv.$procmux$125_CMP.
    Found 1 candidates: $flatten\seven_seg_conv.$div$/openlane/designs/semi_cpu/src/Seven_Segment_Converter.v:100$18
    Analyzing resource sharing with $flatten\seven_seg_conv.$div$/openlane/designs/semi_cpu/src/Seven_Segment_Converter.v:100$18 ($div):
      Found 1 activation_patterns using ctrl signal $auto$opt_reduce.cc:134:opt_pmux$190.
      Activation pattern for cell $flatten\seven_seg_conv.$div$/openlane/designs/semi_cpu/src/Seven_Segment_Converter.v:82$12: $flatten\seven_seg_conv.$procmux$125_CMP = 1'1
      Activation pattern for cell $flatten\seven_seg_conv.$div$/openlane/designs/semi_cpu/src/Seven_Segment_Converter.v:100$18: $auto$opt_reduce.cc:134:opt_pmux$190 = 1'1
      Size of SAT problem: 0 cells, 70 variables, 199 clauses
      According to the SAT solver this pair of cells can be shared.
      Activation signal for $flatten\seven_seg_conv.$div$/openlane/designs/semi_cpu/src/Seven_Segment_Converter.v:82$12: $auto$share.cc:977:make_cell_activation_logic$227
      New cell: $auto$share.cc:667:make_supercell$234 ($div)
  Analyzing resource sharing options for $auto$share.cc:667:make_supercell$234 ($div):
    Found 2 activation_patterns using ctrl signal { $flatten\seven_seg_conv.$procmux$125_CMP $auto$opt_reduce.cc:134:opt_pmux$190 }.
    No candidates found.
  Analyzing resource sharing options for $flatten\reg_file.$memrd$\memory$/openlane/designs/semi_cpu/src/Register_File.v:9$36 ($memrd):
    Found 4 activation_patterns using ctrl signal { $flatten\alu.$procmux$78_CMP $flatten\alu.$procmux$79_CMP $flatten\alu.$procmux$80_CMP }.
    Found 1 candidates: $flatten\reg_file.$memrd$\memory$/openlane/designs/semi_cpu/src/Register_File.v:10$37
    Analyzing resource sharing with $flatten\reg_file.$memrd$\memory$/openlane/designs/semi_cpu/src/Register_File.v:10$37 ($memrd):
      Found 4 activation_patterns using ctrl signal { $flatten\alu.$procmux$78_CMP $flatten\alu.$procmux$79_CMP $flatten\alu.$procmux$80_CMP }.
      Activation pattern for cell $flatten\reg_file.$memrd$\memory$/openlane/designs/semi_cpu/src/Register_File.v:9$36: { $flatten\alu.$procmux$78_CMP $flatten\alu.$procmux$79_CMP $flatten\alu.$procmux$80_CMP } = 3'000
      Activation pattern for cell $flatten\reg_file.$memrd$\memory$/openlane/designs/semi_cpu/src/Register_File.v:9$36: $flatten\alu.$procmux$79_CMP = 1'1
      Activation pattern for cell $flatten\reg_file.$memrd$\memory$/openlane/designs/semi_cpu/src/Register_File.v:9$36: $flatten\alu.$procmux$78_CMP = 1'1
      Activation pattern for cell $flatten\reg_file.$memrd$\memory$/openlane/designs/semi_cpu/src/Register_File.v:9$36: $flatten\alu.$procmux$80_CMP = 1'1
      Activation pattern for cell $flatten\reg_file.$memrd$\memory$/openlane/designs/semi_cpu/src/Register_File.v:10$37: { $flatten\alu.$procmux$78_CMP $flatten\alu.$procmux$79_CMP $flatten\alu.$procmux$80_CMP } = 3'000
      Activation pattern for cell $flatten\reg_file.$memrd$\memory$/openlane/designs/semi_cpu/src/Register_File.v:10$37: $flatten\alu.$procmux$79_CMP = 1'1
      Activation pattern for cell $flatten\reg_file.$memrd$\memory$/openlane/designs/semi_cpu/src/Register_File.v:10$37: $flatten\alu.$procmux$78_CMP = 1'1
      Activation pattern for cell $flatten\reg_file.$memrd$\memory$/openlane/designs/semi_cpu/src/Register_File.v:10$37: $flatten\alu.$procmux$80_CMP = 1'1
      Size of SAT problem: 0 cells, 44 variables, 119 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $flatten\alu.$procmux$78_CMP $flatten\alu.$procmux$79_CMP $flatten\alu.$procmux$80_CMP } = 3'000
  Analyzing resource sharing options for $flatten\reg_file.$memrd$\memory$/openlane/designs/semi_cpu/src/Register_File.v:10$37 ($memrd):
    Found 4 activation_patterns using ctrl signal { $flatten\alu.$procmux$78_CMP $flatten\alu.$procmux$79_CMP $flatten\alu.$procmux$80_CMP }.
    No candidates found.
  Analyzing resource sharing options for $flatten\alu.$shr$/openlane/designs/semi_cpu/src/ALU.v:12$56 ($shr):
    Found 1 activation_patterns using ctrl signal $flatten\alu.$procmux$78_CMP.
    No candidates found.
  Analyzing resource sharing options for $flatten\alu.$shl$/openlane/designs/semi_cpu/src/ALU.v:11$55 ($shl):
    Found 1 activation_patterns using ctrl signal $flatten\alu.$procmux$79_CMP.
    No candidates found.
Removing 4 cells in module Main:
  Removing cell $flatten\seven_seg_conv.$div$/openlane/designs/semi_cpu/src/Seven_Segment_Converter.v:100$18 ($div).
  Removing cell $flatten\seven_seg_conv.$div$/openlane/designs/semi_cpu/src/Seven_Segment_Converter.v:82$12 ($div).
  Removing cell $flatten\seven_seg_conv.$mod$/openlane/designs/semi_cpu/src/Seven_Segment_Converter.v:105$19 ($mod).
  Removing cell $flatten\seven_seg_conv.$mod$/openlane/designs/semi_cpu/src/Seven_Segment_Converter.v:81$11 ($mod).

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Main.
<suppressed ~4 debug messages>

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Main'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

39.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Main..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

39.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Main.
    New ctrl vector for $pmux cell $flatten\seven_seg_conv.$procmux$117: $auto$opt_reduce.cc:134:opt_pmux$238
    New ctrl vector for $pmux cell $flatten\seven_seg_conv.$procmux$127: $auto$opt_reduce.cc:134:opt_pmux$240
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$237: { $flatten\seven_seg_conv.$procmux$118_CMP $flatten\seven_seg_conv.$procmux$119_CMP $flatten\seven_seg_conv.$procmux$120_CMP $flatten\seven_seg_conv.$procmux$121_CMP $flatten\seven_seg_conv.$procmux$122_CMP $flatten\seven_seg_conv.$procmux$123_CMP $flatten\seven_seg_conv.$procmux$124_CMP $flatten\seven_seg_conv.$procmux$125_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$239: { $flatten\seven_seg_conv.$procmux$118_CMP $flatten\seven_seg_conv.$procmux$119_CMP $flatten\seven_seg_conv.$procmux$120_CMP $flatten\seven_seg_conv.$procmux$121_CMP $flatten\seven_seg_conv.$procmux$122_CMP $flatten\seven_seg_conv.$procmux$123_CMP $flatten\seven_seg_conv.$procmux$124_CMP $flatten\seven_seg_conv.$procmux$125_CMP }
  Optimizing cells in module \Main.
Performed a total of 4 changes.

39.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Main'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

39.6. Executing OPT_DFF pass (perform DFF optimizations).

39.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Main..
Removed 0 unused cells and 10 unused wires.
<suppressed ~3 debug messages>

39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Main.

39.9. Rerunning OPT passes. (Maybe there is more to do..)

39.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Main..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

39.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Main.
Performed a total of 0 changes.

39.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Main'.
Removed a total of 0 cells.

39.13. Executing OPT_DFF pass (perform DFF optimizations).

39.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Main..

39.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module Main.

39.16. Finished OPT passes. (There is nothing left to do.)

40. Executing MEMORY pass.

40.1. Executing OPT_MEM pass (optimize memories).
Main.$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67: removing const-1 lane 0
Main.inst_mem.instructions: removing const-1 lane 0
Main.inst_mem.instructions: removing const-1 lane 1
Main.inst_mem.instructions: removing const-0 lane 2
Main.inst_mem.instructions: removing const-0 lane 3
Main.inst_mem.instructions: removing const-1 lane 4
Main.inst_mem.instructions: removing const-0 lane 6
Main.inst_mem.instructions: removing const-0 lane 14
Main.inst_mem.instructions: removing const-0 lane 17
Main.inst_mem.instructions: removing const-0 lane 24
Main.inst_mem.instructions: removing const-0 lane 25
Main.inst_mem.instructions: removing const-0 lane 26
Main.inst_mem.instructions: removing const-0 lane 27
Main.inst_mem.instructions: removing const-0 lane 28
Main.inst_mem.instructions: removing const-0 lane 29
Main.inst_mem.instructions: removing const-0 lane 30
Main.inst_mem.instructions: removing const-0 lane 31
Performed a total of 2 transformations.

40.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

40.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).
  Analyzing Main.reg_file.memory write port 0.

40.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

40.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67'[0] in module `\Main': merging output FF to cell.
Checking read port `\inst_mem.instructions'[0] in module `\Main': no output FF found.
Checking read port `\reg_file.memory'[0] in module `\Main': no output FF found.
Checking read port `\reg_file.memory'[1] in module `\Main': no output FF found.
Checking read port address `\inst_mem.instructions'[0] in module `\Main': address FF has async set and/or reset, not supported.
Checking read port address `\reg_file.memory'[0] in module `\Main': no address FF found.
Checking read port address `\reg_file.memory'[1] in module `\Main': no address FF found.

40.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Main..

40.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).
Consolidating read ports of memory Main.reg_file.memory by address:

40.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

40.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Main..

40.10. Executing MEMORY_COLLECT pass (generating $mem cells).

41. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Main..

42. Executing OPT pass (performing simple optimizations).

42.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Main.
<suppressed ~30 debug messages>

42.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Main'.
Removed a total of 0 cells.

42.3. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 1-bit at position 0 on $flatten\seven_seg_conv.$procdff$184 ($dff) from module Main.
Setting constant 1-bit at position 1 on $flatten\seven_seg_conv.$procdff$184 ($dff) from module Main.
Setting constant 1-bit at position 2 on $flatten\seven_seg_conv.$procdff$184 ($dff) from module Main.
Setting constant 1-bit at position 3 on $flatten\seven_seg_conv.$procdff$184 ($dff) from module Main.
Setting constant 1-bit at position 4 on $flatten\seven_seg_conv.$procdff$184 ($dff) from module Main.
Setting constant 1-bit at position 5 on $flatten\seven_seg_conv.$procdff$184 ($dff) from module Main.
Setting constant 1-bit at position 6 on $flatten\seven_seg_conv.$procdff$184 ($dff) from module Main.
Setting constant 1-bit at position 7 on $flatten\seven_seg_conv.$procdff$184 ($dff) from module Main.

42.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Main..
Removed 0 unused cells and 19 unused wires.
<suppressed ~1 debug messages>

42.5. Rerunning OPT passes. (Removed registers in this run.)

42.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module Main.

42.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Main'.
Removed a total of 0 cells.

42.8. Executing OPT_DFF pass (perform DFF optimizations).

42.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Main..

42.10. Finished fast OPT passes.

43. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory $flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67 in module \Main:
  created 16 $dff cells and 0 static cells of width 7.
Extracted data FF from read port 0 of Main.$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67: $$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdreg[0]
  read interface: 1 $dff and 15 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory \inst_mem.instructions in module \Main:
  created 256 $dff cells and 0 static cells of width 16.
  read interface: 0 $dff and 255 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory \reg_file.memory in module \Main:
  created 32 $dff cells and 0 static cells of width 32.
  read interface: 0 $dff and 62 $mux cells.
  write interface: 32 write mux blocks.

44. Executing OPT pass (performing simple optimizations).

44.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Main.
<suppressed ~259 debug messages>

44.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Main'.
Removed a total of 0 cells.

44.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Main..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $memory\reg_file.memory$rdmux[1][4][12]$1310.
    dead port 2/2 on $mux $memory\reg_file.memory$rdmux[1][4][12]$1310.
    dead port 1/2 on $mux $memory\reg_file.memory$rdmux[1][4][13]$1313.
    dead port 2/2 on $mux $memory\reg_file.memory$rdmux[1][4][13]$1313.
    dead port 1/2 on $mux $memory\reg_file.memory$rdmux[1][4][9]$1301.
    dead port 2/2 on $mux $memory\reg_file.memory$rdmux[1][4][9]$1301.
    dead port 1/2 on $mux $memory\reg_file.memory$rdmux[1][4][10]$1304.
    dead port 2/2 on $mux $memory\reg_file.memory$rdmux[1][4][10]$1304.
    dead port 1/2 on $mux $memory\reg_file.memory$rdmux[0][4][15]$1226.
    dead port 2/2 on $mux $memory\reg_file.memory$rdmux[0][4][15]$1226.
    dead port 1/2 on $mux $memory\reg_file.memory$rdmux[0][4][6]$1199.
    dead port 2/2 on $mux $memory\reg_file.memory$rdmux[0][4][6]$1199.
    dead port 1/2 on $mux $memory\reg_file.memory$rdmux[0][3][5]$1172.
    dead port 2/2 on $mux $memory\reg_file.memory$rdmux[0][3][5]$1172.
    dead port 1/2 on $mux $memory\reg_file.memory$rdmux[1][3][6]$1268.
    dead port 2/2 on $mux $memory\reg_file.memory$rdmux[1][3][6]$1268.
    dead port 1/2 on $mux $memory\reg_file.memory$rdmux[0][3][1]$1160.
    dead port 2/2 on $mux $memory\reg_file.memory$rdmux[0][3][1]$1160.
    dead port 1/2 on $mux $memory\reg_file.memory$rdmux[1][2][3]$1247.
    dead port 2/2 on $mux $memory\reg_file.memory$rdmux[1][2][3]$1247.
    dead port 1/2 on $mux $memory\reg_file.memory$rdmux[1][3][4]$1262.
    dead port 2/2 on $mux $memory\reg_file.memory$rdmux[1][3][4]$1262.
    dead port 1/2 on $mux $memory\reg_file.memory$rdmux[1][4][11]$1307.
    dead port 2/2 on $mux $memory\reg_file.memory$rdmux[1][4][11]$1307.
    dead port 1/2 on $mux $memory\reg_file.memory$rdmux[1][4][8]$1298.
    dead port 2/2 on $mux $memory\reg_file.memory$rdmux[1][4][8]$1298.
    dead port 1/2 on $mux $memory\reg_file.memory$rdmux[0][4][14]$1223.
    dead port 2/2 on $mux $memory\reg_file.memory$rdmux[0][4][14]$1223.
    dead port 1/2 on $mux $memory\reg_file.memory$rdmux[0][4][11]$1214.
    dead port 2/2 on $mux $memory\reg_file.memory$rdmux[0][4][11]$1214.
    dead port 1/2 on $mux $memory\reg_file.memory$rdmux[0][4][7]$1202.
    dead port 2/2 on $mux $memory\reg_file.memory$rdmux[0][4][7]$1202.
    dead port 1/2 on $mux $memory\reg_file.memory$rdmux[0][3][7]$1178.
    dead port 2/2 on $mux $memory\reg_file.memory$rdmux[0][3][7]$1178.
    dead port 1/2 on $mux $memory\reg_file.memory$rdmux[1][3][5]$1265.
    dead port 2/2 on $mux $memory\reg_file.memory$rdmux[1][3][5]$1265.
    dead port 1/2 on $mux $memory\reg_file.memory$rdmux[0][4][10]$1211.
    dead port 2/2 on $mux $memory\reg_file.memory$rdmux[0][4][10]$1211.
    dead port 1/2 on $mux $memory\reg_file.memory$rdmux[0][4][3]$1190.
    dead port 2/2 on $mux $memory\reg_file.memory$rdmux[0][4][3]$1190.
    dead port 1/2 on $mux $memory\reg_file.memory$rdmux[0][3][3]$1166.
    dead port 2/2 on $mux $memory\reg_file.memory$rdmux[0][3][3]$1166.
    dead port 1/2 on $mux $memory\reg_file.memory$rdmux[1][2][2]$1244.
    dead port 2/2 on $mux $memory\reg_file.memory$rdmux[1][2][2]$1244.
    dead port 1/2 on $mux $memory\reg_file.memory$rdmux[1][1][1]$1235.
    dead port 2/2 on $mux $memory\reg_file.memory$rdmux[1][1][1]$1235.
    dead port 1/2 on $mux $memory\reg_file.memory$rdmux[1][3][7]$1271.
    dead port 2/2 on $mux $memory\reg_file.memory$rdmux[1][3][7]$1271.
    dead port 1/2 on $mux $memory\reg_file.memory$rdmux[0][4][2]$1187.
    dead port 2/2 on $mux $memory\reg_file.memory$rdmux[0][4][2]$1187.
    dead port 1/2 on $mux $memory\reg_file.memory$rdmux[1][4][15]$1319.
    dead port 2/2 on $mux $memory\reg_file.memory$rdmux[1][4][15]$1319.
    dead port 1/2 on $mux $memory\reg_file.memory$rdmux[1][4][14]$1316.
    dead port 2/2 on $mux $memory\reg_file.memory$rdmux[1][4][14]$1316.
    dead port 1/5 on $pmux $flatten\ctrl_unit.$procmux$71.
Removed 55 multiplexer ports.
<suppressed ~41 debug messages>

44.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Main.
    Consolidated identical input bits for $mux cell $memory\inst_mem.instructions$rdmux[0][7][2]$694:
      Old ports: A=16'0010000000001010, B=16'0101110101111101, Y=$memory\inst_mem.instructions$rdmux[0][6][1]$a$500
      New ports: A=2'10, B=2'01, Y=$memory\inst_mem.instructions$rdmux[0][6][1]$a$500 [1:0]
      New connections: $memory\inst_mem.instructions$rdmux[0][6][1]$a$500 [15:2] = { 1'0 $memory\inst_mem.instructions$rdmux[0][6][1]$a$500 [0] $memory\inst_mem.instructions$rdmux[0][6][1]$a$500 [1:0] $memory\inst_mem.instructions$rdmux[0][6][1]$a$500 [0] $memory\inst_mem.instructions$rdmux[0][6][1]$a$500 [0] 1'0 $memory\inst_mem.instructions$rdmux[0][6][1]$a$500 [0] 1'0 $memory\inst_mem.instructions$rdmux[0][6][1]$a$500 [0] $memory\inst_mem.instructions$rdmux[0][6][1]$a$500 [0] $memory\inst_mem.instructions$rdmux[0][6][1]$a$500 [0] 1'1 $memory\inst_mem.instructions$rdmux[0][6][1]$a$500 [0] }
    Consolidated identical input bits for $mux cell $memory\inst_mem.instructions$rdmux[0][7][1]$691:
      Old ports: A=16'1111011000110011, B=16'0101110110101000, Y=$memory\inst_mem.instructions$rdmux[0][6][0]$b$498
      New ports: A=2'01, B=2'10, Y={ $memory\inst_mem.instructions$rdmux[0][6][0]$b$498 [3] $memory\inst_mem.instructions$rdmux[0][6][0]$b$498 [0] }
      New connections: { $memory\inst_mem.instructions$rdmux[0][6][0]$b$498 [15:4] $memory\inst_mem.instructions$rdmux[0][6][0]$b$498 [2:1] } = { $memory\inst_mem.instructions$rdmux[0][6][0]$b$498 [0] 1'1 $memory\inst_mem.instructions$rdmux[0][6][0]$b$498 [0] 1'1 $memory\inst_mem.instructions$rdmux[0][6][0]$b$498 [3] 1'1 $memory\inst_mem.instructions$rdmux[0][6][0]$b$498 [0] $memory\inst_mem.instructions$rdmux[0][6][0]$b$498 [3] $memory\inst_mem.instructions$rdmux[0][6][0]$b$498 [3] 2'01 $memory\inst_mem.instructions$rdmux[0][6][0]$b$498 [0] 1'0 $memory\inst_mem.instructions$rdmux[0][6][0]$b$498 [0] }
    Consolidated identical input bits for $mux cell $memory\inst_mem.instructions$rdmux[0][7][0]$688:
      Old ports: A=16'1010000000010100, B=16'1111000000011110, Y=$memory\inst_mem.instructions$rdmux[0][6][0]$a$497
      New ports: A=1'0, B=1'1, Y=$memory\inst_mem.instructions$rdmux[0][6][0]$a$497 [1]
      New connections: { $memory\inst_mem.instructions$rdmux[0][6][0]$a$497 [15:2] $memory\inst_mem.instructions$rdmux[0][6][0]$a$497 [0] } = { 1'1 $memory\inst_mem.instructions$rdmux[0][6][0]$a$497 [1] 1'1 $memory\inst_mem.instructions$rdmux[0][6][0]$a$497 [1] 8'00000001 $memory\inst_mem.instructions$rdmux[0][6][0]$a$497 [1] 2'10 }
    Consolidated identical input bits for $mux cell $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][3][6]$301:
      Old ports: A=7'0110001, B=7'1000010, Y=$memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][3]$a$281
      New ports: A=2'01, B=2'10, Y=$memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][3]$a$281 [1:0]
      New connections: $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][3]$a$281 [6:2] = { $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][3]$a$281 [1:0] $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][3]$a$281 [0] 2'00 }
    Consolidated identical input bits for $mux cell $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][3][5]$298:
      Old ports: A=7'0001000, B=7'1100000, Y=$memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][2]$b$279
      New ports: A=2'01, B=2'10, Y={ $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][2]$b$279 [5] $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][2]$b$279 [3] }
      New connections: { $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][2]$b$279 [6] $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][2]$b$279 [4] $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][2]$b$279 [2:0] } = { $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][2]$b$279 [5] 4'0000 }
    Consolidated identical input bits for $mux cell $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][3][4]$295:
      Old ports: A=7'0000000, B=7'0000100, Y=$memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][2]$a$278
      New ports: A=1'0, B=1'1, Y=$memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][2]$a$278 [2]
      New connections: { $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][2]$a$278 [6:3] $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][2]$a$278 [1:0] } = 6'000000
    Consolidated identical input bits for $mux cell $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][3][3]$292:
      Old ports: A=7'0100000, B=7'0001111, Y=$memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][1]$b$276
      New ports: A=2'10, B=2'01, Y={ $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][1]$b$276 [5] $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][1]$b$276 [0] }
      New connections: { $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][1]$b$276 [6] $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][1]$b$276 [4:1] } = { 2'00 $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][1]$b$276 [0] $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][1]$b$276 [0] $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][1]$b$276 [0] }
    Consolidated identical input bits for $mux cell $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][3][2]$289:
      Old ports: A=7'1001100, B=7'0100100, Y=$memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][1]$a$275
      New ports: A=2'01, B=2'10, Y={ $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][1]$a$275 [5] $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][1]$a$275 [3] }
      New connections: { $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][1]$a$275 [6] $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][1]$a$275 [4] $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][1]$a$275 [2:0] } = { $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][1]$a$275 [3] 4'0100 }
    Consolidated identical input bits for $mux cell $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][3][1]$286:
      Old ports: A=7'0010010, B=7'0000110, Y=$memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][0]$b$273
      New ports: A=2'10, B=2'01, Y={ $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][0]$b$273 [4] $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][0]$b$273 [2] }
      New connections: { $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][0]$b$273 [6:5] $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][0]$b$273 [3] $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][0]$b$273 [1:0] } = 5'00010
    Consolidated identical input bits for $mux cell $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][3][0]$283:
      Old ports: A=7'0000001, B=7'1001111, Y=$memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][0]$a$272
      New ports: A=1'0, B=1'1, Y=$memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][0]$a$272 [1]
      New connections: { $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][0]$a$272 [6:2] $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][0]$a$272 [0] } = { $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][0]$a$272 [1] 2'00 $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][0]$a$272 [1] $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][0]$a$272 [1] 1'1 }
    Consolidated identical input bits for $mux cell $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][3][7]$304:
      Old ports: A=7'0110000, B=7'0111000, Y=$memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][3]$b$282
      New ports: A=1'0, B=1'1, Y=$memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][3]$b$282 [3]
      New connections: { $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][3]$b$282 [6:4] $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][3]$b$282 [2:0] } = 6'011000
  Optimizing cells in module \Main.
    Consolidated identical input bits for $mux cell $memory\inst_mem.instructions$rdmux[0][6][1]$499:
      Old ports: A=$memory\inst_mem.instructions$rdmux[0][6][1]$a$500, B=16'x, Y=$memory\inst_mem.instructions$rdmux[0][5][0]$b$402
      New ports: A={ 2'01 $memory\inst_mem.instructions$rdmux[0][6][1]$a$500 [1:0] }, B=4'x, Y={ $memory\inst_mem.instructions$rdmux[0][5][0]$b$402 [7] $memory\inst_mem.instructions$rdmux[0][5][0]$b$402 [3] $memory\inst_mem.instructions$rdmux[0][5][0]$b$402 [1:0] }
      New connections: { $memory\inst_mem.instructions$rdmux[0][5][0]$b$402 [15:8] $memory\inst_mem.instructions$rdmux[0][5][0]$b$402 [6:4] $memory\inst_mem.instructions$rdmux[0][5][0]$b$402 [2] } = { $memory\inst_mem.instructions$rdmux[0][5][0]$b$402 [7] $memory\inst_mem.instructions$rdmux[0][5][0]$b$402 [0] $memory\inst_mem.instructions$rdmux[0][5][0]$b$402 [1:0] $memory\inst_mem.instructions$rdmux[0][5][0]$b$402 [0] $memory\inst_mem.instructions$rdmux[0][5][0]$b$402 [0] $memory\inst_mem.instructions$rdmux[0][5][0]$b$402 [7] $memory\inst_mem.instructions$rdmux[0][5][0]$b$402 [0] $memory\inst_mem.instructions$rdmux[0][5][0]$b$402 [0] $memory\inst_mem.instructions$rdmux[0][5][0]$b$402 [0] $memory\inst_mem.instructions$rdmux[0][5][0]$b$402 [0] $memory\inst_mem.instructions$rdmux[0][5][0]$b$402 [0] }
    Consolidated identical input bits for $mux cell $memory\inst_mem.instructions$rdmux[0][6][0]$496:
      Old ports: A=$memory\inst_mem.instructions$rdmux[0][6][0]$a$497, B=$memory\inst_mem.instructions$rdmux[0][6][0]$b$498, Y=$memory\inst_mem.instructions$rdmux[0][5][0]$a$401
      New ports: A={ $memory\inst_mem.instructions$rdmux[0][6][0]$a$497 [1] 3'001 $memory\inst_mem.instructions$rdmux[0][6][0]$a$497 [1] 1'1 $memory\inst_mem.instructions$rdmux[0][6][0]$a$497 [1] 1'0 }, B={ 1'1 $memory\inst_mem.instructions$rdmux[0][6][0]$b$498 [3] 1'1 $memory\inst_mem.instructions$rdmux[0][6][0]$b$498 [0] $memory\inst_mem.instructions$rdmux[0][6][0]$b$498 [3] 1'0 $memory\inst_mem.instructions$rdmux[0][6][0]$b$498 [0] $memory\inst_mem.instructions$rdmux[0][6][0]$b$498 [0] }, Y={ $memory\inst_mem.instructions$rdmux[0][5][0]$a$401 [12] $memory\inst_mem.instructions$rdmux[0][5][0]$a$401 [7] $memory\inst_mem.instructions$rdmux[0][5][0]$a$401 [5:0] }
      New connections: { $memory\inst_mem.instructions$rdmux[0][5][0]$a$401 [15:13] $memory\inst_mem.instructions$rdmux[0][5][0]$a$401 [11:8] $memory\inst_mem.instructions$rdmux[0][5][0]$a$401 [6] } = { $memory\inst_mem.instructions$rdmux[0][5][0]$a$401 [4] $memory\inst_mem.instructions$rdmux[0][5][0]$a$401 [12] $memory\inst_mem.instructions$rdmux[0][5][0]$a$401 [4] $memory\inst_mem.instructions$rdmux[0][5][0]$a$401 [7] $memory\inst_mem.instructions$rdmux[0][5][0]$a$401 [5] $memory\inst_mem.instructions$rdmux[0][5][0]$a$401 [0] $memory\inst_mem.instructions$rdmux[0][5][0]$a$401 [7] 1'0 }
    Consolidated identical input bits for $mux cell $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][3]$280:
      Old ports: A=$memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][3]$a$281, B=$memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][3]$b$282, Y=$memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][1][1]$b$270
      New ports: A={ $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][3]$a$281 [0] 1'0 $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][3]$a$281 [1:0] }, B={ 1'1 $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][3]$b$282 [3] 2'00 }, Y={ $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][1][1]$b$270 [4:3] $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][1][1]$b$270 [1:0] }
      New connections: { $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][1][1]$b$270 [6:5] $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][1][1]$b$270 [2] } = { $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][1][1]$b$270 [1] $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][1][1]$b$270 [4] 1'0 }
    Consolidated identical input bits for $mux cell $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][2]$277:
      Old ports: A=$memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][2]$a$278, B=$memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][2]$b$279, Y=$memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][1][1]$a$269
      New ports: A={ 2'00 $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][2]$a$278 [2] }, B={ $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][2]$b$279 [5] $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][2]$b$279 [3] 1'0 }, Y={ $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][1][1]$a$269 [5] $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][1][1]$a$269 [3:2] }
      New connections: { $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][1][1]$a$269 [6] $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][1][1]$a$269 [4] $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][1][1]$a$269 [1:0] } = { $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][1][1]$a$269 [5] 3'000 }
    Consolidated identical input bits for $mux cell $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][1]$274:
      Old ports: A=$memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][1]$a$275, B=$memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][1]$b$276, Y=$memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][1][0]$b$267
      New ports: A={ $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][1]$a$275 [3] $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][1]$a$275 [5] $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][1]$a$275 [3] 2'10 }, B={ 1'0 $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][1]$b$276 [5] $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][1]$b$276 [0] $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][1]$b$276 [0] $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][1]$b$276 [0] }, Y={ $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][1][0]$b$267 [6:5] $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][1][0]$b$267 [3:2] $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][1][0]$b$267 [0] }
      New connections: { $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][1][0]$b$267 [4] $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][1][0]$b$267 [1] } = { 1'0 $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][1][0]$b$267 [0] }
    Consolidated identical input bits for $mux cell $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][0]$271:
      Old ports: A=$memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][0]$a$272, B=$memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][0]$b$273, Y=$memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][1][0]$a$266
      New ports: A={ 1'0 $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][0]$a$272 [1] $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][0]$a$272 [1] $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][0]$a$272 [1] 1'1 }, B={ $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][0]$b$273 [4] 1'0 $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][2][0]$b$273 [2] 2'10 }, Y=$memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][1][0]$a$266 [4:0]
      New connections: $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][1][0]$a$266 [6:5] = { $memory$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdmux[0][1][0]$a$266 [3] 1'0 }
  Optimizing cells in module \Main.
    Consolidated identical input bits for $mux cell $memory\inst_mem.instructions$rdmux[0][5][0]$400:
      Old ports: A=$memory\inst_mem.instructions$rdmux[0][5][0]$a$401, B=$memory\inst_mem.instructions$rdmux[0][5][0]$b$402, Y=$memory\inst_mem.instructions$rdmux[0][4][0]$a$353
      New ports: A={ $memory\inst_mem.instructions$rdmux[0][5][0]$a$401 [4] $memory\inst_mem.instructions$rdmux[0][5][0]$a$401 [4] $memory\inst_mem.instructions$rdmux[0][5][0]$a$401 [12] $memory\inst_mem.instructions$rdmux[0][5][0]$a$401 [0] $memory\inst_mem.instructions$rdmux[0][5][0]$a$401 [7] $memory\inst_mem.instructions$rdmux[0][5][0]$a$401 [7] 1'0 $memory\inst_mem.instructions$rdmux[0][5][0]$a$401 [5:0] }, B={ $memory\inst_mem.instructions$rdmux[0][5][0]$b$402 [7] $memory\inst_mem.instructions$rdmux[0][5][0]$b$402 [1:0] $memory\inst_mem.instructions$rdmux[0][5][0]$b$402 [7] $memory\inst_mem.instructions$rdmux[0][5][0]$b$402 [0] $memory\inst_mem.instructions$rdmux[0][5][0]$b$402 [7] $memory\inst_mem.instructions$rdmux[0][5][0]$b$402 [0] $memory\inst_mem.instructions$rdmux[0][5][0]$b$402 [0] $memory\inst_mem.instructions$rdmux[0][5][0]$b$402 [0] $memory\inst_mem.instructions$rdmux[0][5][0]$b$402 [3] $memory\inst_mem.instructions$rdmux[0][5][0]$b$402 [0] $memory\inst_mem.instructions$rdmux[0][5][0]$b$402 [1:0] }, Y={ $memory\inst_mem.instructions$rdmux[0][4][0]$a$353 [15] $memory\inst_mem.instructions$rdmux[0][4][0]$a$353 [13:12] $memory\inst_mem.instructions$rdmux[0][4][0]$a$353 [9:0] }
      New connections: { $memory\inst_mem.instructions$rdmux[0][4][0]$a$353 [14] $memory\inst_mem.instructions$rdmux[0][4][0]$a$353 [11:10] } = { $memory\inst_mem.instructions$rdmux[0][4][0]$a$353 [12] $memory\inst_mem.instructions$rdmux[0][4][0]$a$353 [8] $memory\inst_mem.instructions$rdmux[0][4][0]$a$353 [5] }
  Optimizing cells in module \Main.
    Consolidated identical input bits for $mux cell $memory\inst_mem.instructions$rdmux[0][4][0]$352:
      Old ports: A=$memory\inst_mem.instructions$rdmux[0][4][0]$a$353, B=16'x, Y=$memory\inst_mem.instructions$rdmux[0][3][0]$a$329
      New ports: A={ $memory\inst_mem.instructions$rdmux[0][4][0]$a$353 [15] $memory\inst_mem.instructions$rdmux[0][4][0]$a$353 [13:12] $memory\inst_mem.instructions$rdmux[0][4][0]$a$353 [9:0] }, B=13'x, Y={ $memory\inst_mem.instructions$rdmux[0][3][0]$a$329 [15] $memory\inst_mem.instructions$rdmux[0][3][0]$a$329 [13:12] $memory\inst_mem.instructions$rdmux[0][3][0]$a$329 [9:0] }
      New connections: { $memory\inst_mem.instructions$rdmux[0][3][0]$a$329 [14] $memory\inst_mem.instructions$rdmux[0][3][0]$a$329 [11:10] } = { $memory\inst_mem.instructions$rdmux[0][3][0]$a$329 [12] $memory\inst_mem.instructions$rdmux[0][3][0]$a$329 [8] $memory\inst_mem.instructions$rdmux[0][3][0]$a$329 [5] }
  Optimizing cells in module \Main.
    Consolidated identical input bits for $mux cell $memory\inst_mem.instructions$rdmux[0][3][0]$328:
      Old ports: A=$memory\inst_mem.instructions$rdmux[0][3][0]$a$329, B=16'x, Y=$memory\inst_mem.instructions$rdmux[0][2][0]$a$317
      New ports: A={ $memory\inst_mem.instructions$rdmux[0][3][0]$a$329 [15] $memory\inst_mem.instructions$rdmux[0][3][0]$a$329 [13:12] $memory\inst_mem.instructions$rdmux[0][3][0]$a$329 [9:0] }, B=13'x, Y={ $memory\inst_mem.instructions$rdmux[0][2][0]$a$317 [15] $memory\inst_mem.instructions$rdmux[0][2][0]$a$317 [13:12] $memory\inst_mem.instructions$rdmux[0][2][0]$a$317 [9:0] }
      New connections: { $memory\inst_mem.instructions$rdmux[0][2][0]$a$317 [14] $memory\inst_mem.instructions$rdmux[0][2][0]$a$317 [11:10] } = { $memory\inst_mem.instructions$rdmux[0][2][0]$a$317 [12] $memory\inst_mem.instructions$rdmux[0][2][0]$a$317 [8] $memory\inst_mem.instructions$rdmux[0][2][0]$a$317 [5] }
  Optimizing cells in module \Main.
    Consolidated identical input bits for $mux cell $memory\inst_mem.instructions$rdmux[0][2][0]$316:
      Old ports: A=$memory\inst_mem.instructions$rdmux[0][2][0]$a$317, B=16'x, Y=$memory\inst_mem.instructions$rdmux[0][1][0]$a$311
      New ports: A={ $memory\inst_mem.instructions$rdmux[0][2][0]$a$317 [15] $memory\inst_mem.instructions$rdmux[0][2][0]$a$317 [13:12] $memory\inst_mem.instructions$rdmux[0][2][0]$a$317 [9:0] }, B=13'x, Y={ $memory\inst_mem.instructions$rdmux[0][1][0]$a$311 [15] $memory\inst_mem.instructions$rdmux[0][1][0]$a$311 [13:12] $memory\inst_mem.instructions$rdmux[0][1][0]$a$311 [9:0] }
      New connections: { $memory\inst_mem.instructions$rdmux[0][1][0]$a$311 [14] $memory\inst_mem.instructions$rdmux[0][1][0]$a$311 [11:10] } = { $memory\inst_mem.instructions$rdmux[0][1][0]$a$311 [12] $memory\inst_mem.instructions$rdmux[0][1][0]$a$311 [8] $memory\inst_mem.instructions$rdmux[0][1][0]$a$311 [5] }
  Optimizing cells in module \Main.
    Consolidated identical input bits for $mux cell $memory\inst_mem.instructions$rdmux[0][1][0]$310:
      Old ports: A=$memory\inst_mem.instructions$rdmux[0][1][0]$a$311, B=16'x, Y=$memory\inst_mem.instructions$rdmux[0][0][0]$a$308
      New ports: A={ $memory\inst_mem.instructions$rdmux[0][1][0]$a$311 [15] $memory\inst_mem.instructions$rdmux[0][1][0]$a$311 [13:12] $memory\inst_mem.instructions$rdmux[0][1][0]$a$311 [9:0] }, B=13'x, Y={ $memory\inst_mem.instructions$rdmux[0][0][0]$a$308 [15] $memory\inst_mem.instructions$rdmux[0][0][0]$a$308 [13:12] $memory\inst_mem.instructions$rdmux[0][0][0]$a$308 [9:0] }
      New connections: { $memory\inst_mem.instructions$rdmux[0][0][0]$a$308 [14] $memory\inst_mem.instructions$rdmux[0][0][0]$a$308 [11:10] } = { $memory\inst_mem.instructions$rdmux[0][0][0]$a$308 [12] $memory\inst_mem.instructions$rdmux[0][0][0]$a$308 [8] $memory\inst_mem.instructions$rdmux[0][0][0]$a$308 [5] }
  Optimizing cells in module \Main.
    Consolidated identical input bits for $mux cell $memory\inst_mem.instructions$rdmux[0][0][0]$307:
      Old ports: A=$memory\inst_mem.instructions$rdmux[0][0][0]$a$308, B=16'x, Y={ \inst_dec.instr [23:18] \inst_dec.instr [16:15] \inst_dec.instr [13:7] \inst_dec.instr [5] }
      New ports: A={ $memory\inst_mem.instructions$rdmux[0][0][0]$a$308 [15] $memory\inst_mem.instructions$rdmux[0][0][0]$a$308 [13:12] $memory\inst_mem.instructions$rdmux[0][0][0]$a$308 [9:0] }, B=13'x, Y={ \inst_dec.instr [23] \inst_dec.instr [21:20] \inst_dec.instr [16:15] \inst_dec.instr [13:7] \inst_dec.instr [5] }
      New connections: { \inst_dec.instr [22] \inst_dec.instr [19:18] } = { \inst_dec.instr [20] \inst_dec.instr [15] \inst_dec.instr [11] }
  Optimizing cells in module \Main.
Performed a total of 23 changes.

44.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Main'.
<suppressed ~15 debug messages>
Removed a total of 5 cells.

44.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $pmux $flatten\alu.$procmux$77 in front of them:
        $auto$alumacc.cc:485:replace_alu$208
        $auto$alumacc.cc:485:replace_alu$205

44.7. Executing OPT_DFF pass (perform DFF optimizations).

44.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Main..
Removed 34 unused cells and 694 unused wires.
<suppressed ~43 debug messages>

44.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module Main.
<suppressed ~12 debug messages>

44.10. Rerunning OPT passes. (Maybe there is more to do..)

44.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Main..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $memory\reg_file.memory$rdmux[0][4][0]$1181.
    dead port 2/2 on $mux $memory\reg_file.memory$rdmux[0][4][12]$1217.
    dead port 2/2 on $mux $memory\reg_file.memory$rdmux[0][4][13]$1220.
    dead port 1/2 on $mux $memory\reg_file.memory$rdmux[0][4][1]$1184.
    dead port 1/2 on $mux $memory\reg_file.memory$rdmux[0][4][4]$1193.
    dead port 1/2 on $mux $memory\reg_file.memory$rdmux[0][4][5]$1196.
    dead port 2/2 on $mux $memory\reg_file.memory$rdmux[0][4][8]$1205.
    dead port 2/2 on $mux $memory\reg_file.memory$rdmux[0][4][9]$1208.
    dead port 1/2 on $mux $memory\reg_file.memory$rdmux[1][4][0]$1274.
    dead port 1/2 on $mux $memory\reg_file.memory$rdmux[1][4][1]$1277.
    dead port 2/2 on $mux $memory\reg_file.memory$rdmux[1][4][2]$1280.
    dead port 2/2 on $mux $memory\reg_file.memory$rdmux[1][4][3]$1283.
    dead port 1/2 on $mux $memory\reg_file.memory$rdmux[1][4][4]$1286.
    dead port 1/2 on $mux $memory\reg_file.memory$rdmux[1][4][5]$1289.
    dead port 2/2 on $mux $memory\reg_file.memory$rdmux[1][4][6]$1292.
    dead port 2/2 on $mux $memory\reg_file.memory$rdmux[1][4][7]$1295.
Removed 16 multiplexer ports.
<suppressed ~36 debug messages>

44.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Main.
    New ctrl vector for $pmux cell $flatten\alu.$procmux$77: { $flatten\alu.$procmux$79_CMP $flatten\alu.$procmux$78_CMP }
  Optimizing cells in module \Main.
Performed a total of 1 changes.

44.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Main'.
Removed a total of 0 cells.

44.14. Executing OPT_SHARE pass.

44.15. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $memory\reg_file.memory[9]$1090 ($dff) from module Main (D = \alu.ALUResult, Q = \reg_file.memory[9]).
Adding EN signal on $memory\reg_file.memory[8]$1088 ($dff) from module Main (D = \alu.ALUResult, Q = \reg_file.memory[8]).
Adding EN signal on $memory\reg_file.memory[7]$1086 ($dff) from module Main (D = \alu.ALUResult, Q = \reg_file.memory[7]).
Adding EN signal on $memory\reg_file.memory[6]$1084 ($dff) from module Main (D = \alu.ALUResult, Q = \reg_file.memory[6]).
Adding EN signal on $memory\reg_file.memory[5]$1082 ($dff) from module Main (D = \alu.ALUResult, Q = \reg_file.memory[5]).
Adding EN signal on $memory\reg_file.memory[4]$1080 ($dff) from module Main (D = \alu.ALUResult, Q = \reg_file.memory[4]).
Adding EN signal on $memory\reg_file.memory[3]$1078 ($dff) from module Main (D = \alu.ALUResult, Q = \reg_file.memory[3]).
Adding EN signal on $memory\reg_file.memory[2]$1076 ($dff) from module Main (D = \alu.ALUResult, Q = \reg_file.memory[2]).
Adding EN signal on $memory\reg_file.memory[27]$1126 ($dff) from module Main (D = \alu.ALUResult, Q = \reg_file.memory[27]).
Adding EN signal on $memory\reg_file.memory[26]$1124 ($dff) from module Main (D = \alu.ALUResult, Q = \reg_file.memory[26]).
Adding EN signal on $memory\reg_file.memory[25]$1122 ($dff) from module Main (D = \alu.ALUResult, Q = \reg_file.memory[25]).
Adding EN signal on $memory\reg_file.memory[24]$1120 ($dff) from module Main (D = \alu.ALUResult, Q = \reg_file.memory[24]).
Adding EN signal on $memory\reg_file.memory[1]$1074 ($dff) from module Main (D = \alu.ALUResult, Q = \reg_file.memory[1]).
Adding EN signal on $memory\reg_file.memory[19]$1110 ($dff) from module Main (D = \alu.ALUResult, Q = \reg_file.memory[19]).
Adding EN signal on $memory\reg_file.memory[18]$1108 ($dff) from module Main (D = \alu.ALUResult, Q = \reg_file.memory[18]).
Adding EN signal on $memory\reg_file.memory[17]$1106 ($dff) from module Main (D = \alu.ALUResult, Q = \reg_file.memory[17]).
Adding EN signal on $memory\reg_file.memory[16]$1104 ($dff) from module Main (D = \alu.ALUResult, Q = \reg_file.memory[16]).
Adding EN signal on $memory\reg_file.memory[15]$1102 ($dff) from module Main (D = \alu.ALUResult, Q = \reg_file.memory[15]).
Adding EN signal on $memory\reg_file.memory[14]$1100 ($dff) from module Main (D = \alu.ALUResult, Q = \reg_file.memory[14]).
Adding EN signal on $memory\reg_file.memory[13]$1098 ($dff) from module Main (D = \alu.ALUResult, Q = \reg_file.memory[13]).
Adding EN signal on $memory\reg_file.memory[12]$1096 ($dff) from module Main (D = \alu.ALUResult, Q = \reg_file.memory[12]).
Adding EN signal on $memory\reg_file.memory[11]$1094 ($dff) from module Main (D = \alu.ALUResult, Q = \reg_file.memory[11]).
Adding EN signal on $memory\reg_file.memory[10]$1092 ($dff) from module Main (D = \alu.ALUResult, Q = \reg_file.memory[10]).
Adding EN signal on $memory\reg_file.memory[0]$1072 ($dff) from module Main (D = \alu.ALUResult, Q = \reg_file.memory[0]).

44.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Main..
Removed 60 unused cells and 85 unused wires.
<suppressed ~73 debug messages>

44.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module Main.

44.18. Rerunning OPT passes. (Maybe there is more to do..)

44.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Main..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

44.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Main.
Performed a total of 0 changes.

44.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Main'.
Removed a total of 0 cells.

44.22. Executing OPT_SHARE pass.

44.23. Executing OPT_DFF pass (perform DFF optimizations).

44.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Main..

44.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module Main.

44.26. Finished OPT passes. (There is nothing left to do.)

45. Executing TECHMAP pass (map to technology primitives).

45.1. Executing Verilog-2005 frontend: /nix/store/sx2v0i73mn1ih2z1nk61pm9n5gjgpidy-yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nix/store/sx2v0i73mn1ih2z1nk61pm9n5gjgpidy-yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

45.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$85df5dc01c7df96a7d8e5f1fdf76ce9ac452af63\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $dlatch.
Using template $paramod$constmap:b9a86d073741c2a0f7bb241e73c2dd11747f3288$paramod$56955d0f36f77738c952d3505dc563df3ee11b94\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:b9a86d073741c2a0f7bb241e73c2dd11747f3288$paramod$dce7c1188cb25d2520d170426d59301c3b73f9e7\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
Using template $paramod$8fabc56b80a569262acfc42757a02ca0b8e91278\_90_pmux for cells of type $pmux.
Using template $paramod$ce0ec84be7047712840b0952f343ee9e63ef75d1\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod$c3cd1564c35d873179656addd6052d7ea8b6d991\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $dffe.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_90_alu for cells of type $alu.
Running "alumacc" on wrapper $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod$86918417b1d705351097c6e77e8f74c668cf6343\_90_div for cells of type $div.
Using template $paramod$86918417b1d705351097c6e77e8f74c668cf6343\_90_mod for cells of type $mod.
Using extmapper simplemap for cells of type $sdff.
Using template $paramod$d7387fdb214042e5ef2d69a3f74948694b4bb65e\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using template $paramod$c6baa65225090ac0a120feab1b920965244aa496\_90_alu for cells of type $alu.
Using template $paramod$86918417b1d705351097c6e77e8f74c668cf6343\$__div_mod_trunc for cells of type $__div_mod_trunc.
Running "alumacc" on wrapper $extern:wrap:$neg:Y_WIDTH=32:A_WIDTH=32:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$neg:Y_WIDTH=32:A_WIDTH=32:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$neg:Y_WIDTH=32:A_WIDTH=32:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $ne.
Using template $paramod\$__div_mod_u\WIDTH=32'00000000000000000000000000100000 for cells of type $__div_mod_u.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=32:B_WIDTH=32:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=32:B_WIDTH=32:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=32:B_WIDTH=32:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=32:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=32:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=32:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=33:B_WIDTH=33:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=33:B_WIDTH=33:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=33:B_WIDTH=33:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=33:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=33:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=33:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=34:B_WIDTH=34:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=34:B_WIDTH=34:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=34:B_WIDTH=34:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=34:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=34:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=34:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=35:B_WIDTH=35:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=35:B_WIDTH=35:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=35:B_WIDTH=35:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=35:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=35:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=35:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=36:B_WIDTH=36:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=36:B_WIDTH=36:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=36:B_WIDTH=36:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=36:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=36:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=36:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=37:B_WIDTH=37:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=37:B_WIDTH=37:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=37:B_WIDTH=37:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=37:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=37:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=37:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=38:B_WIDTH=38:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=38:B_WIDTH=38:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=38:B_WIDTH=38:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=38:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=38:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=38:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=39:B_WIDTH=39:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=39:B_WIDTH=39:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=39:B_WIDTH=39:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=39:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=39:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=39:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=40:B_WIDTH=40:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=40:B_WIDTH=40:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=40:B_WIDTH=40:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=40:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=40:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=40:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=41:B_WIDTH=41:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=41:B_WIDTH=41:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=41:B_WIDTH=41:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=41:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=41:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=41:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=42:B_WIDTH=42:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=42:B_WIDTH=42:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=42:B_WIDTH=42:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=42:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=42:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=42:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=43:B_WIDTH=43:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=43:B_WIDTH=43:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=43:B_WIDTH=43:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=43:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=43:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=43:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=44:B_WIDTH=44:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=44:B_WIDTH=44:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=44:B_WIDTH=44:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=44:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=44:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=44:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=45:B_WIDTH=45:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=45:B_WIDTH=45:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=45:B_WIDTH=45:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=45:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=45:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=45:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=46:B_WIDTH=46:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=46:B_WIDTH=46:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=46:B_WIDTH=46:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=46:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=46:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=46:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=47:B_WIDTH=47:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=47:B_WIDTH=47:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=47:B_WIDTH=47:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=47:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=47:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=47:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=48:B_WIDTH=48:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=48:B_WIDTH=48:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=48:B_WIDTH=48:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=48:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=48:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=48:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=49:B_WIDTH=49:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=49:B_WIDTH=49:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=49:B_WIDTH=49:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=49:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=49:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=49:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=50:B_WIDTH=50:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=50:B_WIDTH=50:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=50:B_WIDTH=50:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=50:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=50:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=50:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=51:B_WIDTH=51:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=51:B_WIDTH=51:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=51:B_WIDTH=51:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=51:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=51:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=51:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=52:B_WIDTH=52:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=52:B_WIDTH=52:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=52:B_WIDTH=52:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=52:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=52:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=52:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=53:B_WIDTH=53:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=53:B_WIDTH=53:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=53:B_WIDTH=53:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=53:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=53:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=53:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=54:B_WIDTH=54:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=54:B_WIDTH=54:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=54:B_WIDTH=54:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=54:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=54:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=54:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=55:B_WIDTH=55:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=55:B_WIDTH=55:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=55:B_WIDTH=55:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=55:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=55:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=55:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=56:B_WIDTH=56:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=56:B_WIDTH=56:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=56:B_WIDTH=56:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=56:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=56:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=56:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=57:B_WIDTH=57:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=57:B_WIDTH=57:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=57:B_WIDTH=57:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=57:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=57:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=57:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=58:B_WIDTH=58:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=58:B_WIDTH=58:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=58:B_WIDTH=58:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=58:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=58:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=58:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=59:B_WIDTH=59:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=59:B_WIDTH=59:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=59:B_WIDTH=59:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=59:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=59:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=59:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=60:B_WIDTH=60:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=60:B_WIDTH=60:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=60:B_WIDTH=60:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=60:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=60:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=60:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=61:B_WIDTH=61:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=61:B_WIDTH=61:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=61:B_WIDTH=61:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=61:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=61:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=61:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=62:B_WIDTH=62:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=62:B_WIDTH=62:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=62:B_WIDTH=62:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=62:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=62:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=62:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=63:B_WIDTH=63:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=63:B_WIDTH=63:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=63:B_WIDTH=63:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=63:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=63:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=63:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$789c344356a154d2afc7b832b41d1067dbc946ba\_90_alu for cells of type $alu.
Using template $paramod$e39069e3f4ee35c1eea86993bd74689959babaab\_90_alu for cells of type $alu.
Using template $paramod$d7aca3dc44b07ff19908fb1a3b606577588c15f1\_90_alu for cells of type $alu.
Using template $paramod$f9e3a3c4b84f99cb56fad07743ec44ad55b11c8b\_90_alu for cells of type $alu.
Using template $paramod$dd5ba471f7dcf35707f23b88cfd15b9582f97277\_90_alu for cells of type $alu.
Using template $paramod$b7531bc0616f8d4cdd8159edd2237c9ddbb2ce01\_90_alu for cells of type $alu.
Using template $paramod$ff8ba121d2f8e85b775c9f35ef677a1a276e7e1b\_90_alu for cells of type $alu.
Using template $paramod$9a66d4bebbc4fab84566caffef9f094a1a467389\_90_alu for cells of type $alu.
Using template $paramod$57bc309a5d8a948cec8981d26d896ee1cbf54d58\_90_alu for cells of type $alu.
Using template $paramod$f94cfdb8ad389f4fc4515bcb65bccd7e2d189e95\_90_alu for cells of type $alu.
Using template $paramod$2a25669ccd39fe7c0fbfb2a4d17416fc78667f00\_90_alu for cells of type $alu.
Using template $paramod$d9397dfdf5f7cf5715aebc9527845402880218a0\_90_alu for cells of type $alu.
Using template $paramod$acc477ace2583cc2ee0cf651c72a385d2bbbe9f1\_90_alu for cells of type $alu.
Using template $paramod$415abdcadc251df4f0f033b62b8f3296b8461b4e\_90_alu for cells of type $alu.
Using template $paramod$6573c1c269218f299badf6e04ca86aa37fdb352c\_90_alu for cells of type $alu.
Using template $paramod$6a21b72c9c0b32e81b169c7e08a4d8b9c462448f\_90_alu for cells of type $alu.
Using template $paramod$324e0706ebb77f1915b22f4a136962ec3fd1d7ff\_90_alu for cells of type $alu.
Using template $paramod$461fc931d630cb01bec1fea87f37fbcc53f6f6a4\_90_alu for cells of type $alu.
Using template $paramod$fe074227b1c5fbaa1ea56076182c29dbcf3a782a\_90_alu for cells of type $alu.
Using template $paramod$85502450775e62e9c6a2fe29020b3433d4335647\_90_alu for cells of type $alu.
Using template $paramod$e32c921f95fe0e2350204f4ecefc9e296355521b\_90_alu for cells of type $alu.
Using template $paramod$05d913fba320393c7e943e625bef3af776153b60\_90_alu for cells of type $alu.
Using template $paramod$8e07e2c0a3efc148d2f3714f3901076678774ed1\_90_alu for cells of type $alu.
Using template $paramod$5b7e592b3c2951af6800b7fd597f66a79b72b91c\_90_alu for cells of type $alu.
Using template $paramod$90182783100594e2dd636a282c4723cfc9adaedd\_90_alu for cells of type $alu.
Using template $paramod$851c5c9b30913ea2deae68e3ca9e9c4e649723bc\_90_alu for cells of type $alu.
Using template $paramod$1445aacdb5f2a1ef9fedf1373097ffa45438211d\_90_alu for cells of type $alu.
Using template $paramod$7add42b712fe5bbbba521e93062103d6bf78a453\_90_alu for cells of type $alu.
Using template $paramod$b6f86f6a0c43c26b22ee55f51e05d5951f0e6562\_90_alu for cells of type $alu.
Using template $paramod$044fdceace8c449ec99f900b42120ac005ff4065\_90_alu for cells of type $alu.
Using template $paramod$b6b58933bcf3c8b9e3e5de18c2637bd0e12c7c47\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000101000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000101001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000101010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000101011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000101100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000101101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000101110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000101111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000110000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000110001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000110010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000110011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000110100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000110101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000110110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000110111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000111000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000111001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000111010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000111011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000111100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000111101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000111110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000111111 for cells of type $lcu.
No more expansions possible.
<suppressed ~38694 debug messages>

46. Executing OPT pass (performing simple optimizations).

46.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Main.
<suppressed ~42578 debug messages>

46.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Main'.
<suppressed ~73593 debug messages>
Removed a total of 24531 cells.

46.3. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$3370 ($_DFFE_PP_) from module Main.

46.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Main..
Removed 660 unused cells and 31772 unused wires.
<suppressed ~661 debug messages>

46.5. Rerunning OPT passes. (Removed registers in this run.)

46.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module Main.

46.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Main'.
Removed a total of 0 cells.

46.8. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$ff.cc:266:slice$3319 ($_DFFE_PP_) from module Main (D = $flatten\seven_seg_conv.$procmux$137.Y_B [7], Q = \seven_seg_conv.an [7], rval = 1'1).
Adding SRST signal on $auto$ff.cc:266:slice$3318 ($_DFFE_PP_) from module Main (D = $flatten\seven_seg_conv.$procmux$137.Y_B [6], Q = \seven_seg_conv.an [6], rval = 1'1).
Adding SRST signal on $auto$ff.cc:266:slice$3317 ($_DFFE_PP_) from module Main (D = $flatten\seven_seg_conv.$procmux$137.Y_B [5], Q = \seven_seg_conv.an [5], rval = 1'1).
Adding SRST signal on $auto$ff.cc:266:slice$3316 ($_DFFE_PP_) from module Main (D = $flatten\seven_seg_conv.$procmux$137.Y_B [4], Q = \seven_seg_conv.an [4], rval = 1'1).
Adding SRST signal on $auto$ff.cc:266:slice$3315 ($_DFFE_PP_) from module Main (D = $flatten\seven_seg_conv.$procmux$137.Y_B [3], Q = \seven_seg_conv.an [3], rval = 1'1).
Adding SRST signal on $auto$ff.cc:266:slice$3314 ($_DFFE_PP_) from module Main (D = $flatten\seven_seg_conv.$procmux$137.Y_B [2], Q = \seven_seg_conv.an [2], rval = 1'1).
Adding SRST signal on $auto$ff.cc:266:slice$3313 ($_DFFE_PP_) from module Main (D = $flatten\seven_seg_conv.$procmux$137.Y_B [1], Q = \seven_seg_conv.an [1], rval = 1'1).
Adding SRST signal on $auto$ff.cc:266:slice$3312 ($_DFFE_PP_) from module Main (D = $flatten\seven_seg_conv.$procmux$137.Y_B [0], Q = \seven_seg_conv.an [0], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1781 ($_DFF_P_) from module Main (D = $flatten\ctrl_unit.$procmux$71.B_AND_S [2], Q = \ctrl_unit.ALUControl [2], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1780 ($_DFF_P_) from module Main (D = $flatten\ctrl_unit.$procmux$71.Y_B [1], Q = \ctrl_unit.ALUControl [1], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1779 ($_DFF_P_) from module Main (D = $flatten\ctrl_unit.$procmux$71.B_AND_S [4], Q = \ctrl_unit.ALUControl [0], rval = 1'0).

46.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Main..
Removed 11 unused cells and 2 unused wires.
<suppressed ~12 debug messages>

46.10. Rerunning OPT passes. (Removed registers in this run.)

46.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module Main.

46.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Main'.
Removed a total of 0 cells.

46.13. Executing OPT_DFF pass (perform DFF optimizations).

46.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Main..

46.15. Finished fast OPT passes.

47. Executing ABC pass (technology mapping using ABC).

47.1. Extracting gate netlist of module `\Main' to `<abc-temp-dir>/input.blif'..
Extracted 7911 gates and 8394 wires to a netlist network with 481 inputs and 129 outputs.

47.1.1. Executing ABC.
Running ABC command: "/nix/store/wq2q0njg3sx8wvj2akz7x1qxwyrv9xlr-yosys-abc/bin/abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

47.1.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:     1721
ABC RESULTS:             ORNOT cells:      266
ABC RESULTS:              XNOR cells:      130
ABC RESULTS:               NOR cells:      449
ABC RESULTS:              NAND cells:       84
ABC RESULTS:            ANDNOT cells:     2220
ABC RESULTS:               NOT cells:      683
ABC RESULTS:                OR cells:      629
ABC RESULTS:               AND cells:       50
ABC RESULTS:               XOR cells:      801
ABC RESULTS:        internal signals:     7784
ABC RESULTS:           input signals:      481
ABC RESULTS:          output signals:      129
Removing temp directory.

48. Executing OPT pass (performing simple optimizations).

48.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Main.
<suppressed ~227 debug messages>

48.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Main'.
<suppressed ~480 debug messages>
Removed a total of 160 cells.

48.3. Executing OPT_DFF pass (perform DFF optimizations).

48.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Main..
Removed 0 unused cells and 3424 unused wires.
<suppressed ~3 debug messages>

48.5. Finished fast OPT passes.

49. Executing HIERARCHY pass (managing design hierarchy).

49.1. Analyzing design hierarchy..
Top module:  \Main

49.2. Analyzing design hierarchy..
Top module:  \Main
Removed 0 unused modules.

50. Printing statistics.

=== Main ===

   Number of wires:               6851
   Number of wire bits:           7973
   Number of public wires:          72
   Number of public wire bits:    1051
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               7369
     $_ANDNOT_                    2069
     $_AND_                         49
     $_DFFE_PN_                      1
     $_DFFE_PP_                    413
     $_DFF_PN0_                      3
     $_DFF_P_                       16
     $_DLATCH_N_                    32
     $_MUX_                       1720
     $_NAND_                        82
     $_NOR_                        449
     $_NOT_                        682
     $_ORNOT_                      264
     $_OR_                         628
     $_SDFFCE_PN0P_                  1
     $_SDFFCE_PN1P_                  7
     $_SDFF_PN0_                    23
     $_XNOR_                       129
     $_XOR_                        801

51. Executing CHECK pass (checking for obvious problems).
Checking module Main...
Found and reported 0 problems.

52. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/semi_cpu/runs/RUN_2025.06.07_09.36.33/tmp/synthesis/post_techmap.dot'.
Dumping module Main to page 1.

53. Executing SHARE pass (SAT-based resource sharing).

54. Executing OPT pass (performing simple optimizations).

54.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Main.
<suppressed ~1 debug messages>

54.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Main'.
Removed a total of 0 cells.

54.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Main..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

54.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Main.
Performed a total of 0 changes.

54.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Main'.
Removed a total of 0 cells.

54.6. Executing OPT_DFF pass (perform DFF optimizations).

54.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Main..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

54.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Main.

54.9. Rerunning OPT passes. (Maybe there is more to do..)

54.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Main..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

54.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Main.
Performed a total of 0 changes.

54.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Main'.
Removed a total of 0 cells.

54.13. Executing OPT_DFF pass (perform DFF optimizations).

54.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Main..

54.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module Main.

54.16. Finished OPT passes. (There is nothing left to do.)

55. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Main..
Removed 0 unused cells and 46 unused wires.
<suppressed ~46 debug messages>

56. Printing statistics.

=== Main ===

   Number of wires:               6804
   Number of wire bits:           7429
   Number of public wires:          26
   Number of public wire bits:     508
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               7368
     $_ANDNOT_                    2069
     $_AND_                         49
     $_DFFE_PN_                      1
     $_DFFE_PP_                    413
     $_DFF_PN0_                      3
     $_DFF_P_                       16
     $_DLATCH_N_                    32
     $_MUX_                       1719
     $_NAND_                        82
     $_NOR_                        449
     $_NOT_                        682
     $_ORNOT_                      264
     $_OR_                         628
     $_SDFFCE_PN0P_                  1
     $_SDFFCE_PN1P_                  7
     $_SDFF_PN0_                    23
     $_XNOR_                       129
     $_XOR_                        801

mapping tbuf

57. Executing TECHMAP pass (map to technology primitives).

57.1. Executing Verilog-2005 frontend: /root/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/root/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

57.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

58. Executing SIMPLEMAP pass (map simple cells to gate primitives).

59. Executing TECHMAP pass (map to technology primitives).

59.1. Executing Verilog-2005 frontend: /root/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/root/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

59.2. Continuing TECHMAP pass.
Using template \$_DLATCH_N_ for cells of type $_DLATCH_N_.
No more expansions possible.
<suppressed ~36 debug messages>

60. Executing SIMPLEMAP pass (map simple cells to gate primitives).

61. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

61.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\Main':
  mapped 3 $_DFF_PN0_ cells to \sky130_fd_sc_hd__dfrtp_2 cells.
  mapped 461 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

62. Printing statistics.

=== Main ===

   Number of wires:               7353
   Number of wire bits:           7978
   Number of public wires:          26
   Number of public wire bits:     508
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               7821
     $_ANDNOT_                    2069
     $_AND_                         49
     $_MUX_                       2172
     $_NAND_                        82
     $_NOR_                        449
     $_NOT_                        682
     $_ORNOT_                      264
     $_OR_                         628
     $_XNOR_                       129
     $_XOR_                        801
     sky130_fd_sc_hd__dfrtp_2        3
     sky130_fd_sc_hd__dfxtp_2      461
     sky130_fd_sc_hd__dlxtn_1       32

[INFO]: USING STRATEGY AREA 0

63. Executing ABC pass (technology mapping using ABC).

63.1. Extracting gate netlist of module `\Main' to `/tmp/yosys-abc-SGmNKp/input.blif'..
Extracted 7325 gates and 7816 wires to a netlist network with 489 inputs and 497 outputs.

63.1.1. Executing ABC.
Running ABC command: "/nix/store/wq2q0njg3sx8wvj2akz7x1qxwyrv9xlr-yosys-abc/bin/abc" -s -f /tmp/yosys-abc-SGmNKp/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-SGmNKp/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-SGmNKp/input.blif 
ABC: + read_lib -w /openlane/designs/semi_cpu/runs/RUN_2025.06.07_09.36.33/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.05 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/semi_cpu/runs/RUN_2025.06.07_09.36.33/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.08 sec
ABC: Memory =    9.54 MB. Time =     0.08 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/semi_cpu/runs/RUN_2025.06.07_09.36.33/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/semi_cpu/runs/RUN_2025.06.07_09.36.33/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: Abc_NtkFastExtract: Nodes have duplicated fanins. FX is not performed.
ABC: + mfs 
ABC: + strash 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + retime -D -D 10000 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 750.0 
ABC: + upsize -D 10000 
ABC: + dnsize -D 10000 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =   2209 ( 37.1 %)   Cap = 11.4 ff ( 10.5 %)   Area =    16533.36 ( 60.5 %)   Delay = 17744.21 ps  (  5.9 %)               
ABC: Path  0 --       9 : 0    9 pi                      A =   0.00  Df =  88.7  -49.5 ps  S = 130.8 ps  Cin =  0.0 ff  Cout =  27.4 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --    1279 : 4    1 sky130_fd_sc_hd__a22o_2 A =  10.01  Df =16760.6 -142.6 ps  S =  38.1 ps  Cin =  2.3 ff  Cout =   2.5 ff  Cmax = 301.2 ff  G =  102  
ABC: Path  2 --    1280 : 1    8 sky130_fd_sc_hd__buf_4  A =   7.51  Df =16943.9 -139.1 ps  S = 151.9 ps  Cin =  2.4 ff  Cout =  52.4 ff  Cmax = 561.2 ff  G = 2143  
ABC: Path  3 --    1299 : 2    2 sky130_fd_sc_hd__or2_4  A =   8.76  Df =17173.5 -233.7 ps  S =  43.7 ps  Cin =  2.4 ff  Cout =   3.4 ff  Cmax = 514.5 ff  G =  133  
ABC: Path  4 --    1300 : 2    1 sky130_fd_sc_hd__and2_2 A =   7.51  Df =17352.1 -291.3 ps  S =  35.9 ps  Cin =  1.5 ff  Cout =   2.4 ff  Cmax = 303.0 ff  G =  156  
ABC: Path  5 --    1302 : 3    1 sky130_fd_sc_hd__mux2_4 A =  15.01  Df =17604.9 -411.7 ps  S =  51.8 ps  Cin =  3.2 ff  Cout =   4.9 ff  Cmax = 536.5 ff  G =  142  
ABC: Path  6 --    1303 : 1    1 sky130_fd_sc_hd__buf_6  A =  11.26  Df =17744.2 -428.0 ps  S =  77.4 ps  Cin =  4.6 ff  Cout =  33.4 ff  Cmax = 785.5 ff  G =  723  
ABC: Start-point = pi8 (\seven_seg_conv.digit_counter [3]).  End-point = po9 ($$flatten\seven_seg_conv.$auto$proc_rom.cc:150:do_switch$67$rdreg[0]$d [3]).
ABC: + print_stats -m 
ABC: netlist                       : i/o =  489/  497  lat =    0  nd =  2209  edge =   4732  area =16532.80  delay =77.00  lev = 77
ABC: + write_blif /tmp/yosys-abc-SGmNKp/output.blif 

63.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__or4_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o2111ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or4b_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a22o_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a32o_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21bai_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or3b_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a211o_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__xnor2_4 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__and2_4 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a21o_4 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__inv_12 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21oi_4 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_4 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__and3_4 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__or3_4 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__o22ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o2bb2a_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__buf_12 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or2_4 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__mux2_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__buf_6 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o311a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and4b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor2b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nand2b_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a32oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__o221ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a31oi_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__and3b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a221o_2 cells:       36
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o2bb2a_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__o21bai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:       14
ABC RESULTS:   sky130_fd_sc_hd__o221a_2 cells:       14
ABC RESULTS:   sky130_fd_sc_hd__o211ai_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__a211oi_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a311o_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__o21ba_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:       17
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:       16
ABC RESULTS:   sky130_fd_sc_hd__nand4b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or4b_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__a21boi_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:       29
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:       60
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:       83
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:       21
ABC RESULTS:   sky130_fd_sc_hd__bufinv_8 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__buf_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:       49
ABC RESULTS:   sky130_fd_sc_hd__buf_4 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:       47
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:       59
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:       61
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:       72
ABC RESULTS:   sky130_fd_sc_hd__a32o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__and4bb_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:       35
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:      310
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:      750
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:       53
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:      215
ABC RESULTS:   sky130_fd_sc_hd__o32a_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:       61
ABC RESULTS:        internal signals:     6830
ABC RESULTS:           input signals:      489
ABC RESULTS:          output signals:      497
Removing temp directory.

64. Executing SETUNDEF pass (replace undef values with defined constants).

65. Executing HILOMAP pass (mapping to constant drivers).

66. Executing SPLITNETS pass (splitting up multi-bit signals).

67. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Main..
Removed 683 unused cells and 8651 unused wires.
<suppressed ~916 debug messages>

68. Executing INSBUF pass (insert buffer cells for connected wires).

69. Executing CHECK pass (checking for obvious problems).
Checking module Main...
Found and reported 0 problems.

70. Printing statistics.

=== Main ===

   Number of wires:               2023
   Number of wire bits:           2037
   Number of public wires:         262
   Number of public wire bits:     276
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2034
     sky130_fd_sc_hd__a211o_2       16
     sky130_fd_sc_hd__a211o_4        1
     sky130_fd_sc_hd__a211oi_2       3
     sky130_fd_sc_hd__a21bo_2        7
     sky130_fd_sc_hd__a21boi_2       4
     sky130_fd_sc_hd__a21o_2        61
     sky130_fd_sc_hd__a21o_4         2
     sky130_fd_sc_hd__a21oi_2       59
     sky130_fd_sc_hd__a21oi_4        7
     sky130_fd_sc_hd__a221o_2       36
     sky130_fd_sc_hd__a22o_2         9
     sky130_fd_sc_hd__a22o_4         1
     sky130_fd_sc_hd__a2bb2o_2       6
     sky130_fd_sc_hd__a2bb2o_4       8
     sky130_fd_sc_hd__a311o_2        7
     sky130_fd_sc_hd__a31o_2        29
     sky130_fd_sc_hd__a31oi_2        6
     sky130_fd_sc_hd__a32o_2         2
     sky130_fd_sc_hd__a32o_4         1
     sky130_fd_sc_hd__a32oi_2        1
     sky130_fd_sc_hd__and2_2        49
     sky130_fd_sc_hd__and2_4         3
     sky130_fd_sc_hd__and2b_2        6
     sky130_fd_sc_hd__and3_2        35
     sky130_fd_sc_hd__and3_4         9
     sky130_fd_sc_hd__and3b_2        2
     sky130_fd_sc_hd__and4_2         6
     sky130_fd_sc_hd__and4b_2        1
     sky130_fd_sc_hd__and4bb_2       1
     sky130_fd_sc_hd__buf_1        302
     sky130_fd_sc_hd__buf_12         1
     sky130_fd_sc_hd__buf_2          1
     sky130_fd_sc_hd__buf_4          9
     sky130_fd_sc_hd__buf_6          3
     sky130_fd_sc_hd__bufinv_8       7
     sky130_fd_sc_hd__conb_1         1
     sky130_fd_sc_hd__dfrtp_2        3
     sky130_fd_sc_hd__dfxtp_2      237
     sky130_fd_sc_hd__dlxtn_1       32
     sky130_fd_sc_hd__inv_12         1
     sky130_fd_sc_hd__inv_2         47
     sky130_fd_sc_hd__mux2_2       310
     sky130_fd_sc_hd__mux2_4         1
     sky130_fd_sc_hd__nand2_2      215
     sky130_fd_sc_hd__nand2b_2       3
     sky130_fd_sc_hd__nand3_2       10
     sky130_fd_sc_hd__nand3b_2       1
     sky130_fd_sc_hd__nand4b_2       1
     sky130_fd_sc_hd__nor2_2        83
     sky130_fd_sc_hd__nor2b_2        2
     sky130_fd_sc_hd__o2111ai_2      1
     sky130_fd_sc_hd__o211a_2       17
     sky130_fd_sc_hd__o211ai_2       6
     sky130_fd_sc_hd__o21a_2        61
     sky130_fd_sc_hd__o21ai_2       53
     sky130_fd_sc_hd__o21ba_2        2
     sky130_fd_sc_hd__o21bai_2       2
     sky130_fd_sc_hd__o21bai_4       1
     sky130_fd_sc_hd__o221a_2       14
     sky130_fd_sc_hd__o221ai_2       1
     sky130_fd_sc_hd__o22a_2        10
     sky130_fd_sc_hd__o22ai_2        1
     sky130_fd_sc_hd__o2bb2a_2       5
     sky130_fd_sc_hd__o2bb2a_4       1
     sky130_fd_sc_hd__o311a_2        2
     sky130_fd_sc_hd__o32a_2         6
     sky130_fd_sc_hd__or2_2         72
     sky130_fd_sc_hd__or2_4          4
     sky130_fd_sc_hd__or2b_2        14
     sky130_fd_sc_hd__or3_2          5
     sky130_fd_sc_hd__or3_4         11
     sky130_fd_sc_hd__or3b_2         2
     sky130_fd_sc_hd__or3b_4         1
     sky130_fd_sc_hd__or4_2          4
     sky130_fd_sc_hd__or4_4          1
     sky130_fd_sc_hd__or4b_2         3
     sky130_fd_sc_hd__or4b_4         1
     sky130_fd_sc_hd__xnor2_2       60
     sky130_fd_sc_hd__xnor2_4        4
     sky130_fd_sc_hd__xor2_2        21

   Chip area for module '\Main': 20455.868800

71. Executing Verilog backend.
Dumping module `\Main'.

72. Executing JSON backend.

End of script. Logfile hash: 3754349158, CPU: user 26.16s system 0.98s, MEM: 574.26 MB peak
Yosys 0.38 (git sha1 543faed9c8c, clang++ 17.0.6 -fPIC -Os)
Time spent: 46% 57x opt_merge (14 sec), 15% 2x abc (4 sec), ...
