
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.38 (git sha1 543faed9c8c, clang++ 17.0.6 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Liberty frontend: /root/.volare/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.

2. Executing Verilog-2005 frontend: /openlane/designs/lab4/src/topmodule.v
Parsing SystemVerilog input from `/openlane/designs/lab4/src/topmodule.v' to AST representation.
Storing AST representation for module `$abstract\topmodule'.
Storing AST representation for module `$abstract\ALU'.
Storing AST representation for module `$abstract\RegisterFile'.
Successfully finished Verilog frontend.

3. Executing HIERARCHY pass (managing design hierarchy).

4. Executing AST frontend in derive mode using pre-parsed AST for module `\topmodule'.
Generating RTLIL representation for module `\topmodule'.

4.1. Analyzing design hierarchy..
Top module:  \topmodule

4.2. Executing AST frontend in derive mode using pre-parsed AST for module `\RegisterFile'.
Generating RTLIL representation for module `\RegisterFile'.

4.3. Executing AST frontend in derive mode using pre-parsed AST for module `\ALU'.
Generating RTLIL representation for module `\ALU'.

4.4. Analyzing design hierarchy..
Top module:  \topmodule
Used module:     \RegisterFile
Used module:     \ALU

4.5. Analyzing design hierarchy..
Top module:  \topmodule
Used module:     \RegisterFile
Used module:     \ALU
Removing unused module `$abstract\RegisterFile'.
Removing unused module `$abstract\ALU'.
Removing unused module `$abstract\topmodule'.
Removed 3 unused modules.

5. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/lab4/runs/RUN_2025.05.31_14.46.37/tmp/synthesis/hierarchy.dot'.
Dumping module topmodule to page 1.
Renaming module topmodule to topmodule.

6. Executing TRIBUF pass.

7. Executing HIERARCHY pass (managing design hierarchy).

7.1. Analyzing design hierarchy..
Top module:  \topmodule
Used module:     \RegisterFile
Used module:     \ALU

7.2. Analyzing design hierarchy..
Top module:  \topmodule
Used module:     \RegisterFile
Used module:     \ALU
Removed 0 unused modules.

8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

9. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/openlane/designs/lab4/src/topmodule.v:67$3 in module RegisterFile.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/lab4/src/topmodule.v:46$12 in module ALU.
Removed a total of 0 dead cases.

10. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 4 assignments to connections.

11. Executing PROC_INIT pass (extract init attributes).

12. Executing PROC_ARST pass (detect async resets in processes).

13. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~2 debug messages>

14. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\topmodule.$proc$/openlane/designs/lab4/src/topmodule.v:22$1'.
Creating decoders for process `\RegisterFile.$proc$/openlane/designs/lab4/src/topmodule.v:67$3'.
     1/5: $1$memwr$\RegisterFile$/openlane/designs/lab4/src/topmodule.v:72$2_EN[3:0]$9
     2/5: $1$memwr$\RegisterFile$/openlane/designs/lab4/src/topmodule.v:72$2_DATA[3:0]$8
     3/5: $1$memwr$\RegisterFile$/openlane/designs/lab4/src/topmodule.v:72$2_ADDR[4:0]$7
     4/5: $0\RD2[3:0]
     5/5: $0\RD1[3:0]
Creating decoders for process `\ALU.$proc$/openlane/designs/lab4/src/topmodule.v:46$12'.
     1/1: $0\outputC[3:0]

15. Executing PROC_DLATCH pass (convert process syncs to latches).

16. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\topmodule.\outputC' using process `\topmodule.$proc$/openlane/designs/lab4/src/topmodule.v:22$1'.
  created $dff cell `$procdff$37' with positive edge clock.
Creating register for signal `\RegisterFile.\RD1' using process `\RegisterFile.$proc$/openlane/designs/lab4/src/topmodule.v:67$3'.
  created $dff cell `$procdff$38' with positive edge clock.
Creating register for signal `\RegisterFile.\RD2' using process `\RegisterFile.$proc$/openlane/designs/lab4/src/topmodule.v:67$3'.
  created $dff cell `$procdff$39' with positive edge clock.
Creating register for signal `\RegisterFile.$memwr$\RegisterFile$/openlane/designs/lab4/src/topmodule.v:72$2_ADDR' using process `\RegisterFile.$proc$/openlane/designs/lab4/src/topmodule.v:67$3'.
  created $dff cell `$procdff$40' with positive edge clock.
Creating register for signal `\RegisterFile.$memwr$\RegisterFile$/openlane/designs/lab4/src/topmodule.v:72$2_DATA' using process `\RegisterFile.$proc$/openlane/designs/lab4/src/topmodule.v:67$3'.
  created $dff cell `$procdff$41' with positive edge clock.
Creating register for signal `\RegisterFile.$memwr$\RegisterFile$/openlane/designs/lab4/src/topmodule.v:72$2_EN' using process `\RegisterFile.$proc$/openlane/designs/lab4/src/topmodule.v:67$3'.
  created $dff cell `$procdff$42' with positive edge clock.
Creating register for signal `\ALU.\outputC' using process `\ALU.$proc$/openlane/designs/lab4/src/topmodule.v:46$12'.
  created $dff cell `$procdff$43' with positive edge clock.

17. Executing PROC_MEMWR pass (convert process memory writes to cells).

18. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `topmodule.$proc$/openlane/designs/lab4/src/topmodule.v:22$1'.
Found and cleaned up 1 empty switch in `\RegisterFile.$proc$/openlane/designs/lab4/src/topmodule.v:67$3'.
Removing empty process `RegisterFile.$proc$/openlane/designs/lab4/src/topmodule.v:67$3'.
Found and cleaned up 1 empty switch in `\ALU.$proc$/openlane/designs/lab4/src/topmodule.v:46$12'.
Removing empty process `ALU.$proc$/openlane/designs/lab4/src/topmodule.v:46$12'.
Cleaned up 2 empty switches.

19. Executing CHECK pass (checking for obvious problems).
Checking module topmodule...
Checking module RegisterFile...
Checking module ALU...
Found and reported 0 problems.

20. Executing OPT_EXPR pass (perform const folding).
Optimizing module topmodule.
Optimizing module RegisterFile.
Optimizing module ALU.
<suppressed ~1 debug messages>

21. Executing FLATTEN pass (flatten design).
Deleting now unused module RegisterFile.
Deleting now unused module ALU.
<suppressed ~2 debug messages>

22. Executing OPT_EXPR pass (perform const folding).
Optimizing module topmodule.

23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topmodule..
Removed 3 unused cells and 18 unused wires.
<suppressed ~4 debug messages>

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module topmodule.

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topmodule'.
Removed a total of 0 cells.

24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topmodule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topmodule.
    Consolidated identical input bits for $mux cell $flatten\Module2.$procmux$18:
      Old ports: A=4'0000, B=4'1111, Y=$flatten\Module2.$0$memwr$\RegisterFile$/openlane/designs/lab4/src/topmodule.v:72$2_EN[3:0]$6
      New ports: A=1'0, B=1'1, Y=$flatten\Module2.$0$memwr$\RegisterFile$/openlane/designs/lab4/src/topmodule.v:72$2_EN[3:0]$6 [0]
      New connections: $flatten\Module2.$0$memwr$\RegisterFile$/openlane/designs/lab4/src/topmodule.v:72$2_EN[3:0]$6 [3:1] = { $flatten\Module2.$0$memwr$\RegisterFile$/openlane/designs/lab4/src/topmodule.v:72$2_EN[3:0]$6 [0] $flatten\Module2.$0$memwr$\RegisterFile$/openlane/designs/lab4/src/topmodule.v:72$2_EN[3:0]$6 [0] $flatten\Module2.$0$memwr$\RegisterFile$/openlane/designs/lab4/src/topmodule.v:72$2_EN[3:0]$6 [0] }
  Optimizing cells in module \topmodule.
Performed a total of 1 changes.

24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topmodule'.
Removed a total of 0 cells.

24.6. Executing OPT_DFF pass (perform DFF optimizations).

24.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topmodule..

24.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module topmodule.

24.9. Rerunning OPT passes. (Maybe there is more to do..)

24.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topmodule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

24.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topmodule.
Performed a total of 0 changes.

24.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topmodule'.
Removed a total of 0 cells.

24.13. Executing OPT_DFF pass (perform DFF optimizations).

24.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topmodule..

24.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module topmodule.

24.16. Finished OPT passes. (There is nothing left to do.)

25. Executing FSM pass (extract and optimize FSM).

25.1. Executing FSM_DETECT pass (finding FSMs in design).

25.2. Executing FSM_EXTRACT pass (extracting FSM from design).

25.3. Executing FSM_OPT pass (simple optimizations of FSMs).

25.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topmodule..

25.5. Executing FSM_OPT pass (simple optimizations of FSMs).

25.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

25.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

25.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

26. Executing OPT pass (performing simple optimizations).

26.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module topmodule.

26.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topmodule'.
Removed a total of 0 cells.

26.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topmodule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

26.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topmodule.
Performed a total of 0 changes.

26.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topmodule'.
Removed a total of 0 cells.

26.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\Module2.$procdff$39 ($dff) from module topmodule (D = $flatten\Module2.$memrd$\RegisterFile$/openlane/designs/lab4/src/topmodule.v:78$11_DATA, Q = \Module2.RD2).
Adding EN signal on $flatten\Module2.$procdff$38 ($dff) from module topmodule (D = $flatten\Module2.$memrd$\RegisterFile$/openlane/designs/lab4/src/topmodule.v:77$10_DATA, Q = \Module2.RD1).

26.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topmodule..
Removed 2 unused cells and 2 unused wires.
<suppressed ~3 debug messages>

26.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module topmodule.

26.9. Rerunning OPT passes. (Maybe there is more to do..)

26.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topmodule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

26.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topmodule.
Performed a total of 0 changes.

26.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topmodule'.
Removed a total of 0 cells.

26.13. Executing OPT_DFF pass (perform DFF optimizations).

26.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topmodule..

26.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module topmodule.

26.16. Finished OPT passes. (There is nothing left to do.)

27. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 2) from port B of cell topmodule.$flatten\Module1.$procmux$35_CMP0 ($eq).

28. Executing PEEPOPT pass (run peephole optimizers).

29. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topmodule..

30. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module topmodule:
  creating $macc model for $flatten\Module1.$add$/openlane/designs/lab4/src/topmodule.v:49$13 ($add).
  creating $macc model for $flatten\Module1.$sub$/openlane/designs/lab4/src/topmodule.v:50$14 ($sub).
  creating $alu model for $macc $flatten\Module1.$sub$/openlane/designs/lab4/src/topmodule.v:50$14.
  creating $alu model for $macc $flatten\Module1.$add$/openlane/designs/lab4/src/topmodule.v:49$13.
  creating $alu cell for $flatten\Module1.$add$/openlane/designs/lab4/src/topmodule.v:49$13: $auto$alumacc.cc:485:replace_alu$47
  creating $alu cell for $flatten\Module1.$sub$/openlane/designs/lab4/src/topmodule.v:50$14: $auto$alumacc.cc:485:replace_alu$50
  created 2 $alu and 0 $macc cells.

31. Executing SHARE pass (SAT-based resource sharing).

32. Executing OPT pass (performing simple optimizations).

32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module topmodule.

32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topmodule'.
Removed a total of 0 cells.

32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topmodule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topmodule.
Performed a total of 0 changes.

32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topmodule'.
Removed a total of 0 cells.

32.6. Executing OPT_DFF pass (perform DFF optimizations).

32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topmodule..

32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module topmodule.

32.9. Finished OPT passes. (There is nothing left to do.)

33. Executing MEMORY pass.

33.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

33.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

33.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).
  Analyzing topmodule.Module2.RegisterFile write port 0.

33.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

33.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `\Module2.RegisterFile'[0] in module `\topmodule': merging output FF to cell.
    Write port 0: don't care on collision.
Checking read port `\Module2.RegisterFile'[1] in module `\topmodule': merging output FF to cell.
    Write port 0: don't care on collision.

33.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topmodule..
Removed 2 unused cells and 10 unused wires.
<suppressed ~3 debug messages>

33.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).
Consolidating read ports of memory topmodule.Module2.RegisterFile by address:

33.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

33.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topmodule..

33.10. Executing MEMORY_COLLECT pass (generating $mem cells).

34. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topmodule..

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module topmodule.
<suppressed ~4 debug messages>

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topmodule'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

35.3. Executing OPT_DFF pass (perform DFF optimizations).

35.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topmodule..
Removed 1 unused cells and 5 unused wires.
<suppressed ~2 debug messages>

35.5. Finished fast OPT passes.

36. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory \Module2.RegisterFile in module \topmodule:
  created 32 $dff cells and 0 static cells of width 4.
Extracted data FF from read port 0 of topmodule.Module2.RegisterFile: $\Module2.RegisterFile$rdreg[0]
Extracted data FF from read port 1 of topmodule.Module2.RegisterFile: $\Module2.RegisterFile$rdreg[1]
  read interface: 2 $dff and 62 $mux cells.
  write interface: 32 write mux blocks.

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module topmodule.
<suppressed ~14 debug messages>

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topmodule'.
Removed a total of 0 cells.

37.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topmodule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~35 debug messages>

37.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topmodule.
Performed a total of 0 changes.

37.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topmodule'.
Removed a total of 0 cells.

37.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $pmux $flatten\Module1.$procmux$32 in front of them:
        $auto$alumacc.cc:485:replace_alu$50
        $auto$alumacc.cc:485:replace_alu$47

37.7. Executing OPT_DFF pass (perform DFF optimizations).

37.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topmodule..
Removed 5 unused cells and 114 unused wires.
<suppressed ~6 debug messages>

37.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module topmodule.

37.10. Rerunning OPT passes. (Maybe there is more to do..)

37.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topmodule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~36 debug messages>

37.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topmodule.
    New ctrl vector for $pmux cell $flatten\Module1.$procmux$32: { $flatten\Module1.$procmux$34_CMP $flatten\Module1.$procmux$33_CMP }
  Optimizing cells in module \topmodule.
Performed a total of 1 changes.

37.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topmodule'.
Removed a total of 0 cells.

37.14. Executing OPT_SHARE pass.

37.15. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $memory\Module2.RegisterFile[9]$85 ($dff) from module topmodule (D = \WD3, Q = \Module2.RegisterFile[9]).
Adding EN signal on $memory\Module2.RegisterFile[8]$83 ($dff) from module topmodule (D = \WD3, Q = \Module2.RegisterFile[8]).
Adding EN signal on $memory\Module2.RegisterFile[7]$81 ($dff) from module topmodule (D = \WD3, Q = \Module2.RegisterFile[7]).
Adding EN signal on $memory\Module2.RegisterFile[6]$79 ($dff) from module topmodule (D = \WD3, Q = \Module2.RegisterFile[6]).
Adding EN signal on $memory\Module2.RegisterFile[5]$77 ($dff) from module topmodule (D = \WD3, Q = \Module2.RegisterFile[5]).
Adding EN signal on $memory\Module2.RegisterFile[4]$75 ($dff) from module topmodule (D = \WD3, Q = \Module2.RegisterFile[4]).
Adding EN signal on $memory\Module2.RegisterFile[3]$73 ($dff) from module topmodule (D = \WD3, Q = \Module2.RegisterFile[3]).
Adding EN signal on $memory\Module2.RegisterFile[31]$129 ($dff) from module topmodule (D = \WD3, Q = \Module2.RegisterFile[31]).
Adding EN signal on $memory\Module2.RegisterFile[30]$127 ($dff) from module topmodule (D = \WD3, Q = \Module2.RegisterFile[30]).
Adding EN signal on $memory\Module2.RegisterFile[2]$71 ($dff) from module topmodule (D = \WD3, Q = \Module2.RegisterFile[2]).
Adding EN signal on $memory\Module2.RegisterFile[29]$125 ($dff) from module topmodule (D = \WD3, Q = \Module2.RegisterFile[29]).
Adding EN signal on $memory\Module2.RegisterFile[28]$123 ($dff) from module topmodule (D = \WD3, Q = \Module2.RegisterFile[28]).
Adding EN signal on $memory\Module2.RegisterFile[27]$121 ($dff) from module topmodule (D = \WD3, Q = \Module2.RegisterFile[27]).
Adding EN signal on $memory\Module2.RegisterFile[26]$119 ($dff) from module topmodule (D = \WD3, Q = \Module2.RegisterFile[26]).
Adding EN signal on $memory\Module2.RegisterFile[25]$117 ($dff) from module topmodule (D = \WD3, Q = \Module2.RegisterFile[25]).
Adding EN signal on $memory\Module2.RegisterFile[24]$115 ($dff) from module topmodule (D = \WD3, Q = \Module2.RegisterFile[24]).
Adding EN signal on $memory\Module2.RegisterFile[23]$113 ($dff) from module topmodule (D = \WD3, Q = \Module2.RegisterFile[23]).
Adding EN signal on $memory\Module2.RegisterFile[22]$111 ($dff) from module topmodule (D = \WD3, Q = \Module2.RegisterFile[22]).
Adding EN signal on $memory\Module2.RegisterFile[21]$109 ($dff) from module topmodule (D = \WD3, Q = \Module2.RegisterFile[21]).
Adding EN signal on $memory\Module2.RegisterFile[20]$107 ($dff) from module topmodule (D = \WD3, Q = \Module2.RegisterFile[20]).
Adding EN signal on $memory\Module2.RegisterFile[1]$69 ($dff) from module topmodule (D = \WD3, Q = \Module2.RegisterFile[1]).
Adding EN signal on $memory\Module2.RegisterFile[19]$105 ($dff) from module topmodule (D = \WD3, Q = \Module2.RegisterFile[19]).
Adding EN signal on $memory\Module2.RegisterFile[18]$103 ($dff) from module topmodule (D = \WD3, Q = \Module2.RegisterFile[18]).
Adding EN signal on $memory\Module2.RegisterFile[17]$101 ($dff) from module topmodule (D = \WD3, Q = \Module2.RegisterFile[17]).
Adding EN signal on $memory\Module2.RegisterFile[16]$99 ($dff) from module topmodule (D = \WD3, Q = \Module2.RegisterFile[16]).
Adding EN signal on $memory\Module2.RegisterFile[15]$97 ($dff) from module topmodule (D = \WD3, Q = \Module2.RegisterFile[15]).
Adding EN signal on $memory\Module2.RegisterFile[14]$95 ($dff) from module topmodule (D = \WD3, Q = \Module2.RegisterFile[14]).
Adding EN signal on $memory\Module2.RegisterFile[13]$93 ($dff) from module topmodule (D = \WD3, Q = \Module2.RegisterFile[13]).
Adding EN signal on $memory\Module2.RegisterFile[12]$91 ($dff) from module topmodule (D = \WD3, Q = \Module2.RegisterFile[12]).
Adding EN signal on $memory\Module2.RegisterFile[11]$89 ($dff) from module topmodule (D = \WD3, Q = \Module2.RegisterFile[11]).
Adding EN signal on $memory\Module2.RegisterFile[10]$87 ($dff) from module topmodule (D = \WD3, Q = \Module2.RegisterFile[10]).
Adding EN signal on $memory\Module2.RegisterFile[0]$67 ($dff) from module topmodule (D = \WD3, Q = \Module2.RegisterFile[0]).

37.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topmodule..
Removed 32 unused cells and 32 unused wires.
<suppressed ~33 debug messages>

37.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module topmodule.

37.18. Rerunning OPT passes. (Maybe there is more to do..)

37.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topmodule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

37.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topmodule.
Performed a total of 0 changes.

37.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topmodule'.
Removed a total of 0 cells.

37.22. Executing OPT_SHARE pass.

37.23. Executing OPT_DFF pass (perform DFF optimizations).

37.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topmodule..

37.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module topmodule.

37.26. Finished OPT passes. (There is nothing left to do.)

38. Executing TECHMAP pass (map to technology primitives).

38.1. Executing Verilog-2005 frontend: /nix/store/sx2v0i73mn1ih2z1nk61pm9n5gjgpidy-yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nix/store/sx2v0i73mn1ih2z1nk61pm9n5gjgpidy-yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

38.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$constmap:caa849dc115b22349251b6d1fd2e89817490b7c3$paramod$9e0cab9ff1a9072810db7158c6c18721eebe35d8\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:caa849dc115b22349251b6d1fd2e89817490b7c3$paramod$a0b0c98a58ef63f32f9322f3719ac7c44f2cb5e6\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$740b056ede97228d3eae64ea2fdc81f0a33e0fe7\_90_alu for cells of type $alu.
Using template $paramod$bf2533632d512eac76dd186c0da49367e29b8e98\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $and.
Running "alumacc" on wrapper $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=4:Y_WIDTH=4:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=4:Y_WIDTH=4:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=4:Y_WIDTH=4:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod$6b90a16b6f3b57b9c9d958838204f952a01dc262\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~774 debug messages>

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module topmodule.
<suppressed ~40 debug messages>

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topmodule'.
<suppressed ~21 debug messages>
Removed a total of 7 cells.

39.3. Executing OPT_DFF pass (perform DFF optimizations).

39.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topmodule..
Removed 9 unused cells and 107 unused wires.
<suppressed ~10 debug messages>

39.5. Finished fast OPT passes.

40. Executing ABC pass (technology mapping using ABC).

40.1. Extracting gate netlist of module `\topmodule' to `<abc-temp-dir>/input.blif'..
Extracted 416 gates and 571 wires to a netlist network with 154 inputs and 44 outputs.

40.1.1. Executing ABC.
Running ABC command: "/nix/store/wq2q0njg3sx8wvj2akz7x1qxwyrv9xlr-yosys-abc/bin/abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

40.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:               NOR cells:        2
ABC RESULTS:              XNOR cells:        3
ABC RESULTS:               XOR cells:        7
ABC RESULTS:               MUX cells:      265
ABC RESULTS:               NOT cells:       12
ABC RESULTS:             ORNOT cells:        8
ABC RESULTS:              NAND cells:        5
ABC RESULTS:                OR cells:       60
ABC RESULTS:            ANDNOT cells:       47
ABC RESULTS:        internal signals:      373
ABC RESULTS:           input signals:      154
ABC RESULTS:          output signals:       44
Removing temp directory.

41. Executing OPT pass (performing simple optimizations).

41.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module topmodule.
<suppressed ~125 debug messages>

41.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topmodule'.
Removed a total of 0 cells.

41.3. Executing OPT_DFF pass (perform DFF optimizations).

41.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topmodule..
Removed 9 unused cells and 347 unused wires.
<suppressed ~10 debug messages>

41.5. Finished fast OPT passes.

42. Executing HIERARCHY pass (managing design hierarchy).

42.1. Analyzing design hierarchy..
Top module:  \topmodule

42.2. Analyzing design hierarchy..
Top module:  \topmodule
Removed 0 unused modules.

43. Printing statistics.

=== topmodule ===

   Number of wires:                450
   Number of wire bits:            620
   Number of public wires:          58
   Number of public wire bits:     219
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                545
     $_ANDNOT_                      47
     $_AND_                          1
     $_DFFE_PN_                      8
     $_DFFE_PP_                    128
     $_DFF_P_                        8
     $_MUX_                        265
     $_NAND_                         5
     $_NOR_                          2
     $_NOT_                          3
     $_ORNOT_                        8
     $_OR_                          60
     $_XNOR_                         3
     $_XOR_                          7

44. Executing CHECK pass (checking for obvious problems).
Checking module topmodule...
Found and reported 0 problems.

45. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/lab4/runs/RUN_2025.05.31_14.46.37/tmp/synthesis/post_techmap.dot'.
Dumping module topmodule to page 1.

46. Executing SHARE pass (SAT-based resource sharing).

47. Executing OPT pass (performing simple optimizations).

47.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module topmodule.

47.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topmodule'.
Removed a total of 0 cells.

47.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topmodule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

47.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topmodule.
Performed a total of 0 changes.

47.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topmodule'.
Removed a total of 0 cells.

47.6. Executing OPT_DFF pass (perform DFF optimizations).

47.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topmodule..

47.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module topmodule.

47.9. Finished OPT passes. (There is nothing left to do.)

48. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topmodule..
Removed 0 unused cells and 13 unused wires.
<suppressed ~13 debug messages>

49. Printing statistics.

=== topmodule ===

   Number of wires:                437
   Number of wire bits:            576
   Number of public wires:          45
   Number of public wire bits:     175
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                545
     $_ANDNOT_                      47
     $_AND_                          1
     $_DFFE_PN_                      8
     $_DFFE_PP_                    128
     $_DFF_P_                        8
     $_MUX_                        265
     $_NAND_                         5
     $_NOR_                          2
     $_NOT_                          3
     $_ORNOT_                        8
     $_OR_                          60
     $_XNOR_                         3
     $_XOR_                          7

mapping tbuf

50. Executing TECHMAP pass (map to technology primitives).

50.1. Executing Verilog-2005 frontend: /root/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/root/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

50.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

51. Executing SIMPLEMAP pass (map simple cells to gate primitives).

52. Executing TECHMAP pass (map to technology primitives).

52.1. Executing Verilog-2005 frontend: /root/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/root/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

52.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

53. Executing SIMPLEMAP pass (map simple cells to gate primitives).

54. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

54.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\topmodule':
  mapped 144 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

55. Printing statistics.

=== topmodule ===

   Number of wires:                573
   Number of wire bits:            712
   Number of public wires:          45
   Number of public wire bits:     175
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                681
     $_ANDNOT_                      47
     $_AND_                          1
     $_MUX_                        401
     $_NAND_                         5
     $_NOR_                          2
     $_NOT_                          3
     $_ORNOT_                        8
     $_OR_                          60
     $_XNOR_                         3
     $_XOR_                          7
     sky130_fd_sc_hd__dfxtp_2      144

[INFO]: USING STRATEGY AREA 0

56. Executing ABC pass (technology mapping using ABC).

56.1. Extracting gate netlist of module `\topmodule' to `/tmp/yosys-abc-a36xAN/input.blif'..
Extracted 537 gates and 703 wires to a netlist network with 166 inputs and 140 outputs.

56.1.1. Executing ABC.
Running ABC command: "/nix/store/wq2q0njg3sx8wvj2akz7x1qxwyrv9xlr-yosys-abc/bin/abc" -s -f /tmp/yosys-abc-a36xAN/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-a36xAN/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-a36xAN/input.blif 
ABC: + read_lib -w /openlane/designs/lab4/runs/RUN_2025.05.31_14.46.37/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.07 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/lab4/runs/RUN_2025.05.31_14.46.37/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.10 sec
ABC: Memory =    9.54 MB. Time =     0.10 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/lab4/runs/RUN_2025.05.31_14.46.37/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/lab4/runs/RUN_2025.05.31_14.46.37/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + retime -D -D 10000 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 750.0 
ABC: + upsize -D 10000 
ABC: Current delay (1943.79 ps) does not exceed the target delay (10000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 10000 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =    621 ( 28.7 %)   Cap = 11.0 ff ( 10.2 %)   Area =     5566.59 ( 65.2 %)   Delay =  2558.71 ps  (  6.8 %)               
ABC: Path  0 --       3 : 0   10 pi                       A =   0.00  Df =  78.7  -43.0 ps  S = 116.5 ps  Cin =  0.0 ff  Cout =  24.2 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --     362 : 1   10 sky130_fd_sc_hd__buf_1   A =   3.75  Df = 462.7 -199.6 ps  S = 456.1 ps  Cin =  2.1 ff  Cout =  38.5 ff  Cmax = 130.0 ff  G = 1745  
ABC: Path  2 --     363 : 1   10 sky130_fd_sc_hd__buf_1   A =   3.75  Df = 887.0 -335.2 ps  S = 459.8 ps  Cin =  2.1 ff  Cout =  39.1 ff  Cmax = 130.0 ff  G = 1770  
ABC: Path  3 --     364 : 1   10 sky130_fd_sc_hd__buf_1   A =   3.75  Df =1288.7 -458.1 ps  S = 426.9 ps  Cin =  2.1 ff  Cout =  36.2 ff  Cmax = 130.0 ff  G = 1640  
ABC: Path  4 --     372 : 2    1 sky130_fd_sc_hd__and2b_2 A =   8.76  Df =1553.3 -463.5 ps  S =  34.6 ps  Cin =  1.6 ff  Cout =   2.4 ff  Cmax = 310.4 ff  G =  147  
ABC: Path  5 --     377 : 5    1 sky130_fd_sc_hd__o221a_2 A =  11.26  Df =1783.1 -135.4 ps  S =  42.9 ps  Cin =  2.3 ff  Cout =   2.6 ff  Cmax = 281.1 ff  G =  101  
ABC: Path  6 --     378 : 3    1 sky130_fd_sc_hd__a21o_2  A =   8.76  Df =1958.3  -91.9 ps  S =  33.7 ps  Cin =  2.4 ff  Cout =   2.5 ff  Cmax = 309.5 ff  G =  101  
ABC: Path  7 --     387 : 4    1 sky130_fd_sc_hd__a211o_2 A =  10.01  Df =2269.8 -266.2 ps  S =  45.0 ps  Cin =  2.4 ff  Cout =   2.5 ff  Cmax = 325.0 ff  G =  100  
ABC: Path  8 --     402 : 4    1 sky130_fd_sc_hd__a22o_2  A =  10.01  Df =2558.7  -89.8 ps  S = 181.2 ps  Cin =  2.3 ff  Cout =  33.4 ff  Cmax = 301.2 ff  G = 1424  
ABC: Start-point = pi2 (\A1 [0]).  End-point = po4 ($auto$rtlil.cc:2684:MuxGate$1864).
ABC: + print_stats -m 
ABC: netlist                       : i/o =  166/  140  lat =    0  nd =   621  edge =   1608  area =5566.09  delay = 9.00  lev = 9
ABC: + write_blif /tmp/yosys-abc-a36xAN/output.blif 

56.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__nor2b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21ba_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a22oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a31oi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__and3b_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__nand3b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:       17
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:       19
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:       36
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:       32
ABC RESULTS:   sky130_fd_sc_hd__o221a_2 cells:       32
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:       31
ABC RESULTS:   sky130_fd_sc_hd__mux4_2 cells:       37
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:      171
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:      175
ABC RESULTS:        internal signals:      397
ABC RESULTS:           input signals:      166
ABC RESULTS:          output signals:      140
Removing temp directory.

57. Executing SETUNDEF pass (replace undef values with defined constants).

58. Executing HILOMAP pass (mapping to constant drivers).

59. Executing SPLITNETS pass (splitting up multi-bit signals).

60. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topmodule..
Removed 0 unused cells and 703 unused wires.
<suppressed ~1 debug messages>

61. Executing INSBUF pass (insert buffer cells for connected wires).

62. Executing CHECK pass (checking for obvious problems).
Checking module topmodule...
Found and reported 0 problems.

63. Printing statistics.

=== topmodule ===

   Number of wires:                765
   Number of wire bits:            796
   Number of public wires:         144
   Number of public wire bits:     175
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                765
     sky130_fd_sc_hd__a211o_2        2
     sky130_fd_sc_hd__a21bo_2       32
     sky130_fd_sc_hd__a21o_2        31
     sky130_fd_sc_hd__a21oi_2       13
     sky130_fd_sc_hd__a22o_2         4
     sky130_fd_sc_hd__a22oi_2        1
     sky130_fd_sc_hd__a31o_2         3
     sky130_fd_sc_hd__a31oi_2        2
     sky130_fd_sc_hd__and2b_2       36
     sky130_fd_sc_hd__and3_2         3
     sky130_fd_sc_hd__and3b_2        4
     sky130_fd_sc_hd__buf_1        175
     sky130_fd_sc_hd__dfxtp_2      144
     sky130_fd_sc_hd__inv_2          3
     sky130_fd_sc_hd__mux2_2       171
     sky130_fd_sc_hd__mux4_2        37
     sky130_fd_sc_hd__nand2_2       17
     sky130_fd_sc_hd__nand3_2        2
     sky130_fd_sc_hd__nand3b_2       2
     sky130_fd_sc_hd__nor2_2        19
     sky130_fd_sc_hd__nor2b_2        1
     sky130_fd_sc_hd__o21a_2         5
     sky130_fd_sc_hd__o21ai_2        3
     sky130_fd_sc_hd__o21ba_2        1
     sky130_fd_sc_hd__o221a_2       32
     sky130_fd_sc_hd__or2_2          2
     sky130_fd_sc_hd__or2b_2         7
     sky130_fd_sc_hd__or3_2          2
     sky130_fd_sc_hd__or3b_2         7
     sky130_fd_sc_hd__xnor2_2        3
     sky130_fd_sc_hd__xor2_2         1

   Chip area for module '\topmodule': 8629.526400

64. Executing Verilog backend.
Dumping module `\topmodule'.

65. Executing JSON backend.

End of script. Logfile hash: 6650df211a, CPU: user 0.85s system 0.06s, MEM: 42.88 MB peak
Yosys 0.38 (git sha1 543faed9c8c, clang++ 17.0.6 -fPIC -Os)
Time spent: 53% 2x abc (0 sec), 11% 2x read_liberty (0 sec), ...
